#+HTML_HEAD: <!-- -*- fill-column: 87 -*- -->
#+HTML_HEAD: <!-- org-toggle-inline-images -->

[TODO:rigidus] - Описать архитектуру с nginx-ом. И схему оптимизации на будущее. И
безопасность на будущее - файрвол, вся фигня.

[TODO:all] - Супервизор и логика его работы. Супервизор перезапускает неотвечающие
сервисы. Лучше запускать с нижнего уровня, чтобы бизнес-логика уже имела возможность
опрашивать оборудование.

[TODO:ranma] [TODO:rigidus] - Описать состояние запуска подробно.

[TODO:rigidus] - Описать обмен TCP-IP

#+TITLE: Der Schlagbaumverk
#+INFOJS_OPT: view:overview toc:nil

#+TAGS: { pyub ranma rigidus unrimah noa }

#+NAME:css
#+BEGIN_HTML
<link rel="stylesheet" type="text/css" href="/css/css.css" />
#+END_HTML

Техническое задание и спецификация на разработку аппаратно-программного комплекса АСПП
(Автоматизированная Система Платной Парковки)

* Теги                                                            :important:

  Я вкурил теги и понял, что =по крайней мере в заголовках= ими лучше пользоваться чем
  поиском по [TODO:pyub] и подобным вещам. Сейчас я постараюсь донести это понимание до
  вас:

  Итак, каждом заголовку можно поставить теги. Это делается с помощью комбинации =C-c
  C-q=, которая вызывает функцию =(org-set-tags-command)=

  Теги пишутся в правой колонке, которой управляет переменная org-tags-column, у
  меня, по умолчанию, она равна 77.

  Если ввести =C-u C-c C-q= все теги в документе будут выровнены (по возможности) по
  этой колонке.

  Теги автоматически перестраиваются после изменения порядка столбцов, двигания
  разделов и присвоения меток TODO, START и других. Кроме того, теги не нарушают поиск
  ссылок на разделы, в отличии от наших вставок [TODO:unrimah] в раздел, после чего
  все ссылки на этот раздел "ломаются".

  Можно ставить несколько тегов на один раздел например так: :pyub:unrimah:

  Чтобы быстро найти все разделы с каким либо тегом нужно нажать =C-/ m= или, еще
  проще - =C-u \=, что вызывает функцию =(org-match-sparse-tree)=, которая прямо в
  текущем файле подсветит вам разделы, которые имеют этот тег.

  Однако иногда удобнее получить список всех этих разделов и дальше ходить по нему. Для
  этого существует мега-полезная комбинация =C-c a < m=, которая из текущего буфера (или
  даже из его выделенной области) сформирует список разделов, имеющих теги, которые вы
  укажете и выведет в отдельный буфер, который покажет вам. Этот буфер можно будет
  обновлять прямо в нем, нажимая =C-u r= о чем собственно и будет написано у него
  наверху. И внутри этого буфера можно будет бродить по всем интересующим разделам,
  который будут открываться в вашем исходном буфере.

* Цель

  Создаем решение для оснащения платных парковок.

  Функции:
  - контроль доступа посетителей к парковочному пространству
  - монетизация от этой услуги

** Компоненты решения
*** Контроллер

    Это комплексное программно-аппартаное решение, состоящее из нескольких физически
    разделяемых печатных плат и ПО к ним.

    =Функции контроллера=:
    - Подключение периферийного оборудования, на лету без перезагрузки.
    - Управление всеми вводами/выводами платы расширения, такими как:
      - датчики,
      - торговое оборудованием
      - релейные развязки
      - и.т.п.
      Вводы / выводы платы и перечень оборудования описаны в разделах:
      - [[*Периферийные устройства контроллера и протоколы связи][Периферийные устройства контроллера и протоколы связи]]
      - [[*Выводы на аудио оборудование][Выводы на аудио оборудование]]
      - [[*Выводы на сухой контакт реле][Выводы на сухой контакт реле]]
    - Настройка работы всего периферийного оборудования (перед использованием) из
      браузера по IP-адресу Описание в разделах:
      - [[*Web-интерфейс для настройки контроллера][Web-интерфейс для настройки контроллера]]
    - Гибкой переконфигурации поведения на ходу, при измении внешних условий и отказах
    - Обеспечение возможности пообщаться с клиентом голосом. Для этого каждый
      контроллер должен распознаваться в локальной сети как SIP-устройство
    - Работа с IP камерами
      - Фотофиксация по событиям:
        - нажатие кнопки
        - подъезд машины
      - Фотосьемку по временном интервале.
    - Осуществлять [[*%D0%A4%D0%BE%D1%82%D0%BE%D1%84%D0%B8%D0%BA%D1%81%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B2%D1%8A%D0%B5%D0%B7%D0%B4%D0%B0][фотофиксацию въезда автомобилей]] по установленным событиям
    - Распознавание номеров на сделанных фотографиях.
    - Осуществление [[*Звуковое сопровождение][звукового сопровождения]] действий пользователя
      - Проигрывание аудиозаписей по определенным событиям, (например, с SD-карты)
    - [[*Логирование сообщений][Логирование сообщений]] на сервер с SD-карту
    - Аутентификация управляющего персонала (логин/пароль)
    - Шифрование трафика при общении с сервером
    - [[*Принцип автономной работы контроллера][Автономная работа]] контроллера при отсутствии связи с сервером

*** Печатные платы

    =Управляющая плата= - печатная плата, представляющая из себя одноплатный
    микрокомпьютер на базе микропроцессора архитектуры ARM Cortex-А7/A8/A9.

    Допускается:
    - использование готовых решений одноплатных микрокомпьютеров
    - варианты микропроцессоров с аналогичными характеристиками
    - рассмотрение вариантов микропроцессоров отечественной разработки

    Для прототипирования выбран микрокомпьютер: =EMBEST BeagleBone Black Rev C= с
    микропоцессором =ARM TI AM3358= (http://www.ti.com/product/AM3359). В дальнейшем
    предполагается оптимизация и адаптация данного решения под требования к контроллеру.

    =Базовая плата= - печатная плата, реализующая базовый необходимый функционал связи
    управляющей платы с периферийными устройствами стойки и другими элементами
    автоматической парковки. На неё устанавливается управляющая плата и, при
    необходимости, плата расширения.

    =Плата расширения= - печатная плата, реализующая дополнительный специфический
    функционал связи с периферийными устройствами и другим оборудованием автоматической
    парковки, а также интеграции с другими системами. Возможна разработка нескольких
    плат расширений с различным функционалом.

*** Программное обеспечение

    =Программное обеспечение контроллера= - операционная система на базе ядра Linux и
    развёрнутое на ней сервисное программное обеспечение, реализующие функции
    контроллера, c клиентским web-интерфейсом для настройки работы.

    =Клиентский интерфейс контроллера= - web-интерфейс для конфигурирования и настрйоки
    работы контроллера администратором, инженером пуско-наладки или разработчиком.

    =Центральный сервер= - компьютер, на котором развёрнута программа управления
    парковкой и хранится база данных со всеми настройками системы и пользователей, а
    также история событий.

    =Серверное ПО= - это программа управления парковкой, через которую осуществляется
    настройка всех основных модулей системы и управление парковочной
    системой. Серверное ПО имеет ядро (сервер приложений?, бэкенд?), базу данных под
    управлением выбранной СУБД (PostgreSQL), интерфейс (фронтенд) и систему
    лицензирования и защиты программных средств.

    =Клиентский интерфейс сервера= - веб-интерфейс модуля сервера, к которому получает
    доступ конечный пользователь системы.

    =Клиентская программа= - отдельно устанавливаемое на ПК (рабочую станцию)
    программное обеспечение, настраиваемое на взаимодействие с сервером, которое
    использует конечный пользователь системы. Нужна для проброса ККМ.

* Описание функционирования
** Общий принцип работы

   Клиент на автомобиле въезжает в зону действия [[*Датчик присутствия автомобиля][датчика присутствия автомобиля]],
   нажимает на кнопку и получает въездной документ - =билет со штрихкодом=. В будущем
   планируется адаптировать систему также под использование другого типа въездного
   документа - автоматически выдаваемые и изымаемые карты стандарта =Mifare+=.

   В штрикоде зашифрована следующая информация:
   - уникальный номер билета в системе
   - номер стойки через которую был совершен въезд
   - номер сектора к которому относится стойка
   - дата и время вьезда
   - массогабаритные характеристики ТС посетителя (например, в таком формате: 0 -
     легковой, 1 - средний, 2 - грузовик)

   =Штрихкод= должен быть зашифрован, чтобы избежать попыток подстановки данных со
   стороны клиента. Также на каждой парковке должен использоваться уникальный ключ
   шифрования, выставляемый в системе, во избежании использования одних и тех же
   билетов на разных парковках.

   В =билете= также открытым текстом напечатано:
   - уникальный номер билета в системе
   - номер стойки через которую был совершен въезд
   - номер сектора к которому относится стойка
   - номер (название) тарифной зоны, если есть
   - дата и время вьезда
   - определённые массогабаритные характеристики ТС
   - текущее время вьезда
   - идентификатор места вьезда
   - номер сектора парковки / тарифной зоны
   - уникальный код билета (буквенно-цифровой)

   После того как пользователь забирает билет, открывается шлагбаум. Взятие билета
   пользователем мы ослеживаем через протокол общения с принтером, который описан в
   документации. Документация будет лежать тут: [[file://asp/devices/barcode_thermal_printer][devices/barcode_thermal_printer]]

   Во время проезда машины под стрелой шлагбаума его закрытие невозможно - наличие
   автомобиля фиксируется фотоэлементом на линии стрелы и датчиком за ней. Это сухой
   контакт, описан в разделе [[*Выводы на сенсоры и кнопки][выводы на сенсоры и кнопки]]. По факту проезда шлагбаум
   закрывается. После въезда начинается допустимое бесплатное время нахождения на
   парковке.

   Также имеется возможность попасть на парковку по бесконтактным картам доступа
   Em-Marine, которые заранее программируются и выдаются клиентам (система СКУД для
   постоянных клиентов и владельцев). Со считывателем СКД (Em-Marine Iron Logic Matrix
   V / Matrix II EH) мы общаемся по протоколу "Wiegand 26".

   /devices/wiegand_26 - описание протокола
   /devices/em-marine_reader - описание устройств на Em-Marine
   /devices/mifare_reader - описание устрйоств на Mifare+

   [TODO:unrimah] Добавить в папки описания стандартов EM и MF

   Далее посетитель парковки должен произвести оплату парковочного времени. Это возможно
   сделать тремя осовными способами:
   - оплатить на автоматической кассе
   - оплатить на ручной кассе (ПК на котором оператор в программе принимает оплату)
   - акцептировать билет у одного из арендаторов (сбросить время или перевести его на
     счёт арендатора)
   В рамках пилотного проекта мы делаем только оплату на ручной кассе, где кассир
   сообщает системе о проведенной оплате через броузер.

   В любом случае информация с билета считывается с помощью сканера штрих кодов (для
   карт Mifare будет использоваться считыватель-программатор), либо на ПК вводом
   буквенно-цифрового кода с билета. При считывании посетителю сообщается сумма оплаты,
   которую он должен внести. По факту приёма оплаты печатается фискальный чек, он же
   выездной билет, а въездной билет аннулируется. Кроме оплаты билет может быть
   [[*%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D1%8C%20%3D%D0%B0%D1%80%D0%B5%D0%BD%D0%B4%D0%B0%D1%82%D0%BE%D1%80%D0%BE%D0%B2%3D][акцептирован арендатором]] с помощью специальной карты или [[*%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D1%8C%20%3D%D0%B0%D0%BA%D1%86%D0%B5%D0%BF%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F%3D][акцептирован]] на ПК.

   Стоимость парковки может варьироваться в зависимости от времени пребывания на ней,
   тарифной сетки (разные тарифы в разное время суток и дни недели) и [[*%D0%A2%D0%B0%D1%80%D0%B8%D1%84%D0%BD%D0%B0%D1%8F%20%D0%B7%D0%BE%D0%BD%D0%B0][тарифных зон]] (на
   одной парковке может быть несколько секторов, в каждом из которых парковка
   оплачивается по разному, между ними стоят проездные стойки).

   После оплаты устанавливается допустимое время нахождения на парковке до выезда. Если
   посетитель находится больше времени, чем было установлено администратором парковки,
   ему необходимо снова оплачивать время. Беслпатное время настраивается со всеми
   тарифами в [[*%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B8%20%D1%82%D0%B0%D1%80%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D0%B8%20%D0%B8%D0%B7%20web-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D0%B0%20%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%BB%D0%B5%D1%80%D0%B0][web-интерфейсе контроллера]] или сервера.

   На выезде посетитель парковки при попадании автомобиля в зону действия датчика
   присутствия подносит свой билет к сканеру штрих кодов и, если допустимое время
   нахождения на парковке не истекло, ему позволяется покинуть парковку (в случае
   Mifare карт карта вставляется в приемник и он её заглатывает). Также имеется
   [[*%D0%9F%D1%80%D0%BE%D0%B5%D0%B7%D0%B4%20%D0%BF%D0%BE%20%D0%BA%D0%B0%D1%80%D1%82%D0%B5%20%D0%A1%D0%9A%D0%A3%D0%94][возможность покинуть парковку по бесконтактным Em-Marine картам]]

** WAIT Парковочные места, тарифные зоны и сектора
*** WAIT Распределение паркомест
*** WAIT Тарифная зона

    Необходимо реализовать гибкую систему тарифов, при этом постаравшись
    максимально сохранить автномность системы в случае падения связи с
    сервером.

    Основные единые настройки бесплатного времени:
    - бесплатное время после въезда (мин)
    - бесплатное время на выезд после оплаты (мин)

    Эти характеристики должны быть индивидуальны для разных секторов парковки. Т.е.,
    например, в секторе открытого паркинга одни тарифы, а в секторе закрытого -
    другие. Между секторами стоит проездная стойка со сканером штрих кодов (для Mifare
    парковки это сделать проще в автономном режиме). При поднесении она переносит на
    сервере и всех соседних стойках билет в другой сектор. При этом если машина отстояла
    t1 времени в одном секторе, а потом поехала в другой, то данные по оплате
    суммируется, а бесплатное время во втором секторе не считается.

    Основые вещи:
    - Со скольки до скольки работает парковка (осуществляется впуск и выпуск)
      Допустимо по картам СКУД пускать например круглосуточно, а по чекам - только днем
    - Бесплатное время - время, которое машина может стоять на парковке до требования
      оплаты. В течении его она может выехать бесплатно.
    - Время на выезд - время за которое машина может покинуть парковку после оплаты
      водителем в кассе. Если не успел - время на выезд не учитывается.
    - Штраф - сумма, которая взимается с человека, если он потерял вьездной документ.
    - Стоимость часов исходя из того, что имеются следующие основыне тарифные характеристики:
      - стоимость 1го..2го..23го..24го.. часа после истечения бесплатного времени
    - коэффициент стоймости в зависимости от времени суток (с 20:00 до 22:00 k=2, с 9:00 до 18:00 k=0,5)
    - коэффицикнт стоймости в зависимости от дня недели (пн, вт, ср, чт, пт k2=1, сб,вс k2=2)

*** WAIT Сектор парковки

    Секторальность - например есть крытая и открытая система парковки, между ними
    стойка. Если пользователь на ночь хочет на закрытую парковку - там другой тариф,
    все это надо считать, суммируя. В пилотном проекте не делаем, но учитывать нужно
    при программировании системы тарифов.

** Логирование сообщений

   Контроллеры взаимодействуют между собой и сервером через отправку и получение
   [[*%D0%A1%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D0%BD%D0%B8%D0%B5][сообщений]].

   Все сообщения должны писаться в лог-файл. Основное место хранения лога работы
   системы - сервер. Каждый контроллер ведёт свою отдельную историю, храня в своей
   памяти сообщения за время t (или определённое кол-во сообщений), дублируя эти данные
   на агрегирующий сервер, где они собираются в единый лог. В случае отсутствия связи
   контроллер перестаёт удалять сервисные сообщения из своего лога, собирая "хвост"
   вплоть до появления связи. Если место для сообщений заканчивается, а связь не
   появилась - возможно удаление некритичных сообщений и запись на их место критичных.

   Необходимо обеспечить постоянную запись истории работы системы:
   - проходящих штатно событий (например, события выезда, события выезд, произошедшей оплаты);
   - кодов известных ошибок в работе контроллера и основного ПО;
   - кодов известных ошибок в работе переферийного оборудования (обработка кодов ошибок из протоколов взаимодействия самих устройств);
   - кодов известных ошибок возникающих при нарушении связи между контроллерами и / или сервером;
   - сообщений о неизвестных ошибках.

   Контроллер держит в своей постоянной памяти на SD-карте единовременно лог событий не
   превышающий установленное в [[*%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0%20%D0%BB%D0%BE%D0%B3%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F%20%D1%81%D0%BE%D0%B1%D1%8B%D1%82%D0%B8%D0%B9][настройках логирования событий]] количество записей. В нём
   же управляется объем информации хранимой на SD-карте.

   [TODO:pyub] Необходимо продумать, что мы делаем при отказе SD.

   При этом он постоянно отправляет сообщения об ошибках на агрегирующий сервер, где
   они систематизируются в доступном для оператора или администратора виде и хранятся
   долгосрочно. Если связь нарушена, контроллер сохраняет сообщения сверх
   установленного количеств записей вплоть до заполнения памяти.

** TODO Состояния стойки при проезде                                   :pyub:

   defenition: [[*Стойка][Стойка]]

   Независимо от используемого комплекта периферийного оборудования контроллера при
   въезде он может находится в следующих состояниях:

   #+CAPTION: Состояния конечного автомата стойки
   #+NAME: checkpoint_state
     | action              | from     | to      |
     |---------------------+----------+---------|
     | selftest-to-lock    | selftest | lock    |
     | selftest-to-standby | selftest | standby |
     | standby-to-lock     | standby  | lock    |
     | standby-to-finding  | standby  | finding |
     | finding-to-lock     | finding  | lock    |
     | finding-to-dialog   | finding  | dialog  |
     | dialog-to-lock      | dialog   | lock    |
     | dialog-to-init      | dialog   | init    |
     | init-to-lock        | init     | lock    |
     | init-to-goon        | init     | goon    |
     | goon-to-lock        | goon     | lock    |
     | goon-to-fin         | goon     | fin     |

   Теперь мы можем полностью описать поведение стойки как конечный автомат:

   #+NAME: checkpoin_state_graph
   #+BEGIN_SRC emacs-lisp :var table=in_state :results output :exports none
     (mapcar #'(lambda (x)
                 (princ (format "%s -> %s [label =\"%s\"];\n"
                                (second x) (third x) (first x))))
             table)
   #+END_SRC

   #+BEGIN_SRC dot :file img/in-state.png :var input=in_state_graph :exports results
     digraph G {
       rankdir = LR;
       $input
     }
   #+END_SRC

   #+results:
   [[file:img/in-state.png]]

*** TODO Состояние запуска (=poweron=)

    =poweron= - состояние старта системы.

    Запускаем:
    nginx + нижний уровень + бизнес-логика + UI

    Асинхронный запуск под контролем раннера [todo:unrimah] Опиши как всё это будет работать.

    В данном состоянии проводится первичная проверка настроек бизнес-логики (то что мы
    описываем на уровне =SettingsLayer=) и далее ожидается событие =devices-ready= или
    =devices-error=, создаваемые по сумме итога инициализации устройств на нижнем уровне.

    При событии =devices-ready= с нижнего уровня запрашивается список существующих
    устройств и сравнивается со списком из =SettingsLayer= для проверки соответсвия
    реально существующих (инициализированных) устройств списку настроенных в системе
    устройств. В случае несоответствия списков переходим в состояние =hardlock=.

    Находясь в состоянии =poweron= от ниженго уровня системы ются отчёты о
    состоянии конкретных устройств. Система на уровне бизнес-логики определяет
    дальнешиее алгоритмы работы с ними, согласуя в том числе работу комплектов
    зависимых друг от друга устройств.

*** TODO Состояние тестирования (=selftest=)                    :pyub:ranma:

    В данном состоянии осуществляется тестирование всего периферийного оборудования по
    кругу. Вход в это состояние возможен из любого другого состояния при получении
    сообщения о сбое от нижнего уровня или команды разблокировки из UI (с кнопки
    разблокировки на стойке или через web-интерфейс контроллера или через web-интерфейс
    сервера).

    Бизнес-логике по устройствам интересно следующее:
    - Существует ли физически устройство
    - Существует ли в текущей конфигурации (чтобы узнать это запрашивать нижний уровень необязательно - PostgreSQL)
    - Включено или выключено в UI (тоже)
    - Работает ли оно нормально или с ошибками?

    [TODO:ranma] - Выявить ошибки, которые нижний уровень может самостоятельно решить
    (например: отказ сканера - перезагрузка помогает)
    [COMMENT:ranma] До пилотника я не могу взять на себя такие решения. Может в процессе что-то вылезет, буду иметь в виду.

    [TODO:pyub] [TODO:unrimah] - Расставить устройства по приориету, в каком порядке разрабатывать
    json-ы, чтобы Ранма не заебался сразу со всем.
    [COMMENT:ranma] Не только json, но и реальные устройства по порядку.

    [TODO:ranma:rigidus] Очень важно как можно раньше согласовать API - что и в каком
    виде бизнес-логика получает от низкого уровня и что с этим делает. Ранма говорит,
    что будет предоставлять с нижнего уровня наверх всю информацию по статусу
    устройств, на уровне бизнес-логики надо лишь принимать решение. При этом всё
    тестирование также будет осуществляться на нижнем уровне. В моей голове всё это не
    очень клеится с тем, что мы обсудили. Прошу вас согласовать это и переписать
    данный раздел.
    [COMMENT:ranma] На нижнем уровне будет проводиться не все тестирование. Только наличие 
    устройства, если это возможно, и его инициализация.

    Находясь в состоянии =selftest= от ниженго уровня системы получаются отчёты о
    состоянии конкретных устройств. Система на уровне бизнес-логики определяет
    дальнешие алгоритмы работы с ними, согласуя в том числе работу комплектов
    зависимых друг от друга устройств [todo:noa] Поставить ссылку.

    Если проходя через состояние =selftest= система сама пытается устранить неполадки.
    [todo:ranma] Согласовать данный момент между бл и нижним уровнем.

    В этот момент можно диагностировать критичные отказы ([todo:ranma]проработать виды
    отказов) перед началом работы.  При обнаружении критичного отказа стойка
    классифицирует отказ и немедленно переходит в состояние =hardlock= или =softlock=,
    отсылая об этом сообщение на сервер.

    Если тестирование оборудования прошло успешно, мы переходим к состоянию =standby=
    или, в зависимости от [[*%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B8%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B%20%D0%B4%D0%B0%D1%82%D1%87%D0%B8%D0%BA%D0%BE%D0%B2%20%D0%B8%20%D1%80%D0%B5%D0%BB%D0%B5][установленных настроек датчиков и реле]], в другие состояния.

    [todo:pyub] заменить везде опросное на "опрашиваемое"

    Точки входа в состояние:
    - включение стойки, т.е. на контроллер подано питание
    - отсутствие ответа опрашиваемого оборудования [todo:pyub] ссылка на определение
    - сигнал об ошибке от опрашиваемого оборудования
    - =root= принудительно перевел из UI [todo:pyub] описать опцию в описании UI
      контроллера, важно - невозможность перевода в процессе исполнения задачи /
      автомата или перехода между состояниями

    В состоянии =selftest= должны функционировать (в порядке запуска):
    - подсистема логировнаия
    - обмен сообщениями с сервером
    - SSH
    - UI web-интерфейс контроллера
    - подсистема [[*%D0%A2%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B8%20%D0%B4%D0%B8%D0%B0%D0%B3%D0%BD%D0%BE%D1%81%D1%82%D0%B8%D0%BA%D0%B0%20%D0%B8%D0%B7%20web-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D0%B0%20%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%BB%D0%B5%D1%80%D0%B0][тестирования и диагностики из web-интерфейса контроллера]] [todo:pyub] описать
    далее запускаются все остальные модули и периферийное оборудованние, которое
    необходимо тестировать.

    Стойка может быть выключена, но присутствовать в системе. Выключенная стойка не
    получает и не реагирует ни на какие внешние воздействия. Управляющий сервер должен
    иметь возможность отслеживать стойку в этом состоянии и включать/выключать ее при
    необходимости.

    В случае, если диагностирован некритичный отказ, информация о нем записывается в
    конфигурацию, и об отказе информируется сервер.

*** DONE Состояние ожидания (=standby=)

    Режим работы в котором датчик стойки не видит автомобиля и не идёт никакой другой
    процесс. В нём стойка реагирует на действия пользователя только сервисными
    сообщениями, выводя на дисплей либо сообщение о том, что нет автомобиля, либо
    сервисное сообщение о статусе карты/чека. Вся периферия неактивна.

    Различие в алгоритмах режима ожидания главным образом заключается в том, что к стойкам
    может быть подключен разный набор датчиков, соответственно условие перехода в
    следующее состояние зависит от конкретного набора.

    Также в зависимости от настроек пользователя по разному работает взаимодействие с
    пользователем: если нет машины - стойка не реагирует на нажатия кнопок на ней, или
    занимается продажей карточек и.т.п.

    [[*Состояние ожидания (простой вьезд по чеку)][Состояние ожидания (простой вьезд по чеку)]] - для сценария вьезда с бумажными
    билетами

    В этом состянии стойка может обнаружить критичный отказ, в этом случае она
    немедленно переходит в состояние =hardlock=, информируя об этом сервер

*** TODO Подъезд машины к стойке (=finding=)

    Процесс управления сложной процедурой подъезда машины к стойке (через шлюз из двух
    шлагбаумов, по рампе) и/или определения датчиком (петлей индуктивности,
    фотоэлементом, датчиком магнитного поля) габаритов/массы автотранспортного
    средства, а также контроля подъезда к стойке.

    [[*%D0%9F%D0%BE%D0%B4%D1%8C%D0%B5%D0%B7%D0%B4%20%D0%BC%D0%B0%D1%88%D0%B8%D0%BD%D1%8B%20%D0%BA%20%D1%81%D1%82%D0%BE%D0%B9%D0%BA%D0%B5%20(%3Dfinding%3D)][Подьезд машины к стойке (=finding=)]] для сценария вьезда с бумажными билетами

    [TODO:pyub] - Критичный отказ возможен? Какие условия его возникновения? Как
    обрабатываем такую ситуацию, если управляем машиной?

*** TODO Стойка в диалоговом режиме (=dialog=)                         :pyub:

    После срабатывания датчика присутствия стойка начинает диалог с посетителем, выводя
    на дисплей сообщения =display-dialog= о необходимости совершения действий, ошибок и
    т.п. В этом режиме посетитель может совершить действия, которые в конечном счёте
    может привести к большому списку различных ответов системы, запуска процедур и
    изменений состояний.

    [TODO:pyub] - дописать и перечислить все возможные действия, которые может
    совершить пользователь, описать протокол взаимодействия для каждого из них
    (поведение стойки в ответ на действия пользователя, варианты действий пользователя
    в каждом узле протокола, и.т.п)

    [comment:pyub] действия и реакция на них расписаны в описаниях для конкретных типов
    стоек и конкретных типов оборудования.

    На этом этапе осуществляется арбитраж в случае использования реверсивного проезда
    (один шлагбаум на две стойки с разных сторон) или использования двух стоек для
    левого и правого руля.

    После срабатывания датчика присутствия стойка начинает диалог с посетителем, выводя
    на дисплей сообщения о необходимости совершения действий, ошибок и т.п. Стойка
    может сопровождать эти действия проигрыванием аудиозаписей для клиента.

    После прикладывания пользователем въездного документа, либо оплатного документа,
    либо карты СКУД, стойка совершает проверку возможности выезда, статуса оплаты и так
    далее. На этом этапе осуществляется арбитраж в случае использования реверсивного
    проезда (один шлагбаум на две стойки с разных сторон) или использования двух стоек
    для левого и правого руля. Также на этом этапе выезд может быть совмещён с оплатой,
    как на автоматическом кассовом терминале.

    Разрешение для посетителя на пребывание на парковке в течение определенного
    промежутка времени после оплаты задается арендатором. При этом клиентская программа
    арендатора шлет информацию на центральный сервер, а центральный сервер сохраняет
    информацию и транслирует ее контроллеру. Контроллер сохраняет полученную информацию
    в памяти. При выезде автомобиля контроллер проверяет, истек срок пребывания на
    парковке или нет, и разрешает или запрещает выезд. Время выезда передается на
    центральный сервер.

    Есть диалоговый режим, который при неплаченном проезде приводит к процедуре
    оплаты. [TODO:pyub] - Описать и дать ссылку.

    [TODO:pyub] - Критичный отказ возможен? Какие условия его возникновения? Как
    обрабатываем такую ситуацию?

**** Дисплей =display-dailog=
***** =display-gialog-enter=
****** Дисплей =4lines=
******* barcode
******* EM

*** TODO Инициация процедуры проезда (=init=)                          :pyub:

    После того, как посетителю разрешён въезд (из презентера устройства забран чек или
    карта, или успешно проверен статус карты СКУД) контроллер инициирует процесс
    открытия шлагбаума, замыкая соответсвующие реле и принимая сигналы с концевиков
    шлагбаума (или давая выставленный в миллисекундах импульс, если концевиков нет).

    [TODO:pyub] - Мне нужны описания сообщений, получаемых контроллером от устройств,
    которые приводят к выходу из состояния =init=.

    [TODO:pyub] - Что с критичным отказом в этом состянии? Условия возникновения, как
    обрабатываем?

*** TODO Процедура проезда (=goon=)                                    :pyub:

    После открытия шлагбаума контроллер контролирует проезд машины под стрелой,
    принимая сообщения с датчика безопасности (фотоэлемент на линии стрелы) и датчика
    завершения проезда (петля индуктивности за стрелой, фотоэлемент, датчик МП). В эту
    же процедуру может входит контроль проезда по рампе или через шлюз, находящийся за
    стойкой.

    [TODO:pyub] - Необходимо описать различия по рампе/шлюзу/реверсивному движению
    (алгоритм движения, включаемые устройства, ожидание подтверждения проезда от
    датчиков и.т.п.)

    [TODO:pyub] - Мне нужны описания сообщений, получаемых контроллером от устройств,
    которые приводят к выходу из состояния =goon=.

    [TODO:pyub] - Что с критичным отказом в этом состянии? Условия возникновения, как
    обрабатываем?

*** TODO Процедура завершения проезда (=fin=)

    Процесс закрытия шлагбаума после проезда машины, отправки итоговых данных о
    совершённом проезде на сервер и возвращения стойки в режим ожидания.

    [TODO:pyub] - Надо описать различия по отправляемым на сервер данным от периферии и
    настроек тарифных зон.

    [TODO:pyub] - Мне нужны описания сообщений, получаемых контроллером от устройств,
    которые приводят к выходу из состояния =fin=.

    [TODO:pyub] - Что с критичным отказом в этом состянии? Условия возникновения, как
    обрабатываем?

*** TODO Cостояние полной блокировки (=hardlock=)

    При возникновении критичного отказа стойка может перевести себя в данное состояние,
    заблокировав всё своё периферийное оборудование и завершив все процессы
    взаимодействия с переферийным оборудованием для возмодности работы с этими
    библиотеками и модулями.

    В этом случае, в зависимости от алгоритма (например =barcode=) она выполняет
    урезанный протокол взаимодействия, и не занимается своей основной задачей -
    пропускать машины, а вместо этого, например только продает билеты, или даже
    информирует посетителя о сбое работы.

    [TODO:pyub] - В случае, если отказ некритичный, и стойка может управлять проездом
    машин, то она не переходит в состояние =hardlock=, вместо этого модифицируется
    алгоритм . К примеру, если отказал термопринтер, стойка может успешно пропускать
    постоянных клиентов по картам, для этого мы просто меняем текущий алгоритм ее
    работы, на что то вроде "проезд только по картам" - и это критичным отказом не
    считается. Следовательно то что описано ниже - про частичную блокировку - нужно
    вынести в другое место - полагаю в алгоритмы работы. При этом там, где мы описываем
    различные отказы описать, при каком отказе один алгоритм текущей работы стойки
    может поменяться на другой.

    [TODO:pyub] - Раз стойка может быть выключена, то вероятно сервер может выключить
    ее, отправив ей сообщение. Нужно описать в каких состояниях возможно выключение (мы
    же не хотим вырубить стойку при проезде машины так, чтобы на нее рухнул шлагбаум?)
    Полагаю, что во всех остальных состояниях стойка запоминает, что необходимо
    выключиться, выполняет протокол до первого состояния где выключение возможно и
    выключается. В этом случае я должен предусмотреть корректную реакцию на события во
    всех этих состяниях.

    Состояние, в которое переходит стойка в случае некорректной работы критичного для
    работы системы опросного [[*%3D%25type%25%20%D0%BF%D0%B5%D1%80%D0%B5%D1%84%D0%B5%D1%80%D0%B8%D0%B9%D0%BD%D1%8B%D0%B5%20%D1%83%D1%81%D1%82%D1%80%D0%BE%D0%B9%D1%81%D1%82%D0%B2%D0%B0%3D][периферийного устройства]]. Для стоек, на которых нет
    торгового оборудования (т.е.работы с деньгами) блокировка должна быть
    частичной. Например, если заканчивается бумага в термопринтере, выводится сообщение
    о том, что "Печать билета невозможна, обратитесь к персоналу парковки", но при этом
    въезд по пластиковым билетам (картам) для постоянных клиентов по прежнему возможен.

    В случае возникновения ситуации блокировки стойка регулярно отправляеет на сервер
    сервисное сообщение о том, что она работает в нештатном режиме и требуется
    произвести замену бумаги или ремонт устройства.

*** WAIT Процедура частичной блокировки (=softlock=)
*** WAIT Процедура оплаты (=payment=)

    В пилотном проекте мы пострараемся избежать реализации этого.

    Это состояние может быть активировано и после =dialog= и после =standby=. Может
    быть касса, совмещенная с выездом, на ней есть и торговое
    оборудование. Пользователь может прийти пешком из =standby= и оплатить или
    подьехать - тогда входом может быть любое состояние и выходом может быть =standby=
    или =init=.

** TODO Обработка сигналов и сообщений                                 :pyub:
*** TODO Входящие сигналы с датчиков                                   :pyub:

    Принцип функционирования простых =датчиков=: в самом датчике замыкается реле, с
    него на контроллер парковочной системы идёт ток 5/12/24 В (в зависимости от
    устройства датчика). Пока ток идёт на =сенсорный ввод= контроллера, системное
    значение сенсора =SX= = =1= (где X - номер датчика).  Когда тока нет на сенсоре -
    =SX= = =0=.

    Например: для =датчика присутствия= наличие сигнала (=1=) значит, что автомобиль
    находится в зоне действия контура датчика. Если =0=, то автомобиля нет.

    Для =датчика безопасности= отсутствие сигнала (=0=) означает, что на на линии
    стрелы шлагбаума находится объект (луч разомкнут). Если =1=, то линия свободна.

    Для =датчика контроля стрелы шлагбаума= - определение того, что стрела находится
    в определённном положении:
    есть сигнал с =концевика открытия= (=1=) - стрела поднята
    есть сигнал с =концевика закрытия= (=1=) - стрела опущена
    нет сигнала с обоих концевиков (=0=) - стрела в промежуточном состоянии
    есть сигнал с обоих концевиков (=1=) - ошибка

    В случае отказа сенсорного устройства администратор снимает соотвествующий
    устройству флаг [[*%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B8%20%D0%B0%D0%B4%D0%BC%D0%B8%D0%BD%D0%B8%D1%81%D1%82%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B0%20%D0%B8%D0%B7%20web-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D0%B0%20%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%BB%D0%B5%D1%80%D0%B0][настройках администратора в web-интерфейсе контроллера]] и проверка сигнала на
    данном сенсоре отключается. Если датчик отключён, все проверки, связанные с ним, не
    выполняются.

    [TODO:pyub] - Полагаю, такие вещи можно делать и автоматически, не привлекая
    администратора. В алгоритмах работы, в каждом состоянии нужно описать что мы
    делаем, получив отказ какого-то датчика.

    Неисправность в работе простых датчиков никак не диагоностируется.  Если датчик или
    линия связи неисправны - вместо изменения сигнала ничего ни происходит.

    [TODO:pyub] - Однако в ряде случаев мы можем диагностировать неисправность, если
    датчик сообщает нам что-то такое, чего не может быть в этом состоянии. Например,
    если в =standby= шлагбаум не закрыт и не открыт. Или к примеру в =selftest= (сразу
    после включения стойки), при закрытом шлакбауме фотоэлемент сообщает о присутствии
    машины под ним.

    Если на петле Б нет автомобиля - шлагбаум закрывается по выставлемому оператором
    =таймауту закрытия шлагбаума=, отсчитываемому после получения сигнала о проезде с
    датчика безопасности (фотоэлемент).

    Если фотоэлемент и петля Б не функционируют одновременно - шлагбаум закрывается только
    по выставляемому оператором  таймауту закрытия шлагбаума, отсчитываемому после прихода
    сигнала об открытии шлагбаума.

    Если отсуствуют или не работают =датчики статуса стрелы шлагбаума= (концевики
    открытия/закрытия) - то при открытие шлагбаума напряжение на него подаётся в
    соотвествии с настроенным =временим импульса открытия шлагбаума=, а при закрытии в
    соответсвии с настроенным =временим импульса закрытия шлагбаума=. Статус концевиков
    при этом не учитывается.

    Тонкая настройка датчиков также оператором через [[*%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B8%20%D0%B0%D0%B4%D0%BC%D0%B8%D0%BD%D0%B8%D1%81%D1%82%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B0%20%D0%B8%D0%B7%20web-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D0%B0%20%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%BB%D0%B5%D1%80%D0%B0][UI администратора контроллера]] и
    описана в разделе [[*%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B8%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B%20%D0%B4%D0%B0%D1%82%D1%87%D0%B8%D0%BA%D0%BE%D0%B2%20%D0%B8%20%D1%80%D0%B5%D0%BB%D0%B5][Настройки работы датчиков и реле]]

*** TODO Отмена проезда по чеку                                        :pyub:

    Если алгоритм въезда не завершён до конца, не важно на каком этапе это произошло,
    то полученный билет аннулируется через время t.

    [TODO:pyub] - важно описать все такие инварианты (прерывание алгортима вьезда) в
    каждом из алгоритмов.

*** TODO Повторная печать въездного билета                             :pyub:

    Для невозможности печати человеком без машины печати нового билета у въездной
    стойки для бесплатного выезда, используется датчик магнитной петли А и алгоритм
    перехода из режима ожидания в режим диалога при появлении машины в зоне датчика. В
    случае, если билет всё-же печатается (например, для обмана системы используется
    другая машина на въезде), то либо следующий въехавший автомобиль остаётся без
    билета и посетитель вынужден оплачивать штраф, либо, если машина не въехала,
    срабатывает [[*%D0%9E%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0%20%D0%BE%D1%82%D0%BC%D0%B5%D0%BD%D1%8B%20%D0%BF%D1%80%D0%BE%D0%B5%D0%B7%D0%B4%D0%B0%20%D0%BF%D0%BE%20%D1%87%D0%B5%D0%BA%D1%83...][обработка отмены проезда по чеку]]

    [TODO:pyub] - Не могу перейти по этой ссылке

    [TODO:pyub] - Следующий клиент мягко говоря не поймет, что мы используем его для
    контроля мошенничества предыдущего клиента. Надо этот момент как-то переработать...

    [TODO:rigidus] - Немного не правильно сформулирова. Суть объясню устно когда
    приедешь.

    [TODO:pyub] - Нет уж, давай тут, чтобы в гите потом можно было найти

*** Настройки администратора из web-интерфейса контроллера
**** Настройка торгового оборудования
***** TODO Включить печать билетов термопринтером              :rigidus:pyub:
      [TODO:pyub] Внести момент относительно информирования клиента о невозможности
      въехать по билету при неисправности принтера

      Если в комплекте оборудования =въездной стойки= есть =термопринтер= и в память
      контроллера установлена библиотека для работы с ним, внутри системы взводится
      флаг =printer-exist= и в настройках в web-интерфейсе самого контроллера становится
      доступен флаг включения или отключения работы термопринтера.

      При изменении значения этого флага сервер посылает стойке соотвествующие
      сообщения и стойка включает или выключает термопринтер в своих настройках.

      [TODO:rigidus] - Описать это в разделе web-интерфейса и обработчике сообщений
      контроллером. Проверить все инварианты в случаях, когда термопринтер
      есть/нет/сломан/починен.

      =printer-on= - принтер включен и возможен въезд по бумажным билетам (флаг установлен)
      =printer-off= - принтер отключен и въезд по бумажным билетам невозможен (флаг снят)

      В случае наличия включённого термопринтера во всех состояниях стойки на дисплее
      отображается сообщения, связанные с печатью и обработкой билета.

      [TODO:rigidus] Описать проверку в виде кода.

      [TODO:pyub] - чтобы описать это в коде я должен знать сообщения стойки для всех
      состояний всех алгоритмов если принтер включен, если принтер выключен и если он
      сломан.

      Обработка ошибок в работе термопринтера:
      [[*%D0%9E%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0%20%D0%BE%D1%88%D0%B8%D0%B1%D0%BE%D0%BA%20%D0%B2%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B5%20%D1%82%D0%B5%D1%80%D0%BC%D0%BE%D0%BF%D1%80%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D0%B0%20%D0%BD%D0%B0%20%D0%B2%D1%8A%D0%B5%D0%B7%D0%B4%D0%B5%20(%3Dprinter-problem%3D)][Обработка ошибок в работе термопринтера на въезде (=printer-problem=)]]

**** Настройки работы датчиков и реле
***** TODO Включить проверку датчика магнитной петли А              :rigidus:

      [TODO:rigidus] Описать проверку в виде кода.

      В настройках в =web-интерфейсе= контроллера есть флаг включения или отключения
      проверки статуса машины по =датчику присутствия автомобиля А=.

      В настройках по умолчанию проверка включена (=detector-a= - =enabled=).
      В настройках по умолчанию =detector-a= присвоен сенсорный ввод =S1=.

      Состояние =detector-a= = =0= (не замкнуто реле, нет машины).
      Состояние =detector-a= = =1= (замкнуто реле, машина на петле).

      Если администратор отключает датчик присутствия автомобиля (снимает флаг), то
      возникает событие =detector-a-disabled=.

      Для алгоритма простого въезда по чекам в состоянии =standby=:
      [[*%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0:%20%D0%92%D1%8B%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B0%20%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0%20%D0%B4%D0%B0%D1%82%D1%87%D0%B8%D0%BA%D0%B0%20%D0%BF%D1%80%D0%B8%D1%81%D1%83%D1%82%D1%81%D0%B2%D0%B8%D1%8F%20%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%BE%D0%B1%D0%B8%D0%BB%D1%8F%20%D0%90][Настройка: Выключена проверка датчика присутсвия автомобиля А]]

***** TODO Включить проверку датчика магнитной петли Б              :rigidus:

      [TODO:rigidus] Описать проверку в виде кода.

      В настройках в =web-интерфейсе= контроллера есть флаг включения или отключения
      проверки статуса машины по =датчику присутствия автомобиля Б=.

      В настройках по умолчанию проверка включена (=detector-b= - =enabled=).
      В настройках по умолчанию =detector-b= присвоен сенсорный ввод =S2=.

      Состояние =detector-b= = =0= (не замкнуто реле, нет машины).
      Состояние =detector-b= = =1= (замкнуто реле, машина на петле).

      Если администратор отключает датчик присутствия автомобиля (снимает флаг), то
      возникает событие =detector-b-disabled=.

***** TODO Включить проверку фотоэлемента безопасности              :rigidus:

      [TODO:rigidus] Описать проверку в виде кода.

      В настройках в =web-интерфейсе= контроллера есть флаг включения или отключения
      проверки статуса =датчика безопасности=, отвечающего за остановку закрытия стрелы
      шлагбаума при наличии на линии фотоэлементов объекта.

      В настройках по умолчанию проверка включена (=detector-safety= - =enabled=).
      В настройках по умолчанию =detector-safety= присвоен сенсорный ввод =S7=.

      Состояние =detector-safety = =1= (не замкнуто реле, на линии
      фотоэлементов нет объекта).
      Состояние =detector-safety = =0= (замкнуто реле, на линии
      фотоэлементов есть объект).

      Если администратор отключает датчик безопасносоти (снимает флаг), то
      возникает событие =detector-safety= -  =disabled=.

      Если датчик безопасности отключён - в процедуре закрытия шлагбаума не
      формируется событие =gate-stop= при наличии объекта на линии фотоэлемента в
      процессе закрытия, и при начал процедуры закрытия не проверяются состояние =detector-safety=.

***** TODO Включить работу с концевиком открытия шлагбаума          :rigidus:

      [TODO:rigidus] Описать проверку в виде кода.

      В настройках в =web-интерфейсе= контроллера есть флаг включения или отключения
      проверки статуса =датчика статуса стрелы шлагбаума= - =концевика открытия=,
      отвечающего за контроль статуса стрелы шлагбаума и остановку движения стрелы по
      факту её открытия.

      В настройках по умолчанию проверка включена (=detector-gate-open= - =enabled=).
      В настройках по умолчанию =detector-gate-open= присвоен сенсорный ввод =S5=.

      Состояние =detector-gate-open= = =1= (замкнуто реле, стрела шлагбаума открыта)
      приводит к событию =gate-open=.
      Состояние =detector-gate-open= = =0= (не замкнуто реле, стрела шлагбаума НЕ открыта).

      Если администратор отключает датчик концевика открытия (снимает флаг), то
      возникает событие =detector-gate-open-disabled=.

      Если проверка концевика открытия отключена, то открытие шлагбаума и остановка
      движения стрелы происходят по параметру =импульс открытия шлагбаума=.

      См. [[*%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0%20%D0%B8%D0%BC%D0%BF%D1%83%D0%BB%D1%8C%D1%81%D0%B0%20%D0%BE%D1%82%D0%BA%D1%80%D1%8B%D1%82%D0%B8%D1%8F%20%D1%88%D0%BB%D0%B0%D0%B3%D0%B1%D0%B0%D1%83%D0%BC%D0%B0][Настройка импульса открытия шлагбаума]]

***** TODO Включить работу с концевиком закрытия шлагбаума          :rigidus:

      [TODO:rigidus] Описать проверку в виде кода.

      В настройках в =web-интерфейсе= контроллера есть флаг включения или отключения
      проверки статуса =датчика статуса стрелы шлагбаума= - =концевика закрытия=,
      отвечающего за контроль статуса стрелы шлагбаума и остановку движения стрелы по
      факту её закрытия.

      В настройках по умолчанию проверка включена (=detector-gate-close= - =enabled=).
      В настройках по умолчанию =detector-gate-close= присвоен сенсорный ввод =S6=.

      Состояние =detector-gate-close= = =1= (замкнуто реле, стрела шлагбаума открыта)
      приводит к событию =gate-close=.
      Состояние =detector-gate-close= = =0= (не замкнуто реле, стрела шлагбаума НЕ
      открыта).

      Если администратор отключает датчик концевика закрытия (снимает флаг), то
      возникает событие =detector-gate-close-disabled=.

      Если проверка концевика закрытия отключена, то открытие шлагбаума и остановка
      движения стрелы происходят по параметру =импульс закрытия шлагбаума=.

      См. [[*%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0%20%D0%B8%D0%BC%D0%BF%D1%83%D0%BB%D1%8C%D1%81%D0%B0%20%D0%B7%D0%B0%D0%BA%D1%80%D1%8B%D1%82%D0%B8%D1%8F%20%D1%88%D0%BB%D0%B0%D0%B3%D0%B1%D0%B0%D1%83%D0%BC%D0%B0][Настройка импульса закрытия шлагбаума]]

***** TODO Настройка импульса открытия шлагбаума                    :rigidus:

      [TODO:rigidus] Описать проверку в виде кода.

      В настройках в =web-интерфейсе= контроллера есть поле настройки =импульса
      открытия шлагбаума= (=impulse-gate-open=) в котором можно в милисекундах
      выставить время, в течении которого с реле открытия шлагбаума
      (=relay-gate-open=) подаётся напряжение, т.е. стрела поднимается. Когда реле
      размыкается - стрела останавливается и происходит событие =gate-open=.

      Поле =impulse-gate-open= активно для ввода значения только если актвино событие
      =detector-gate-open-disabled=, т.е [[*%D0%92%D0%BA%D0%BB%D1%8E%D1%87%D0%B8%D1%82%D1%8C%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%83%20%D1%81%20%D0%BA%D0%BE%D0%BD%D1%86%D0%B5%D0%B2%D0%B8%D0%BA%D0%BE%D0%BC%20%D0%BE%D1%82%D0%BA%D1%80%D1%8B%D1%82%D0%B8%D1%8F%20%D1%88%D0%BB%D0%B0%D0%B3%D0%B1%D0%B0%D1%83%D0%BC%D0%B0][выключена работа с концевиком открытия шлагбаума]].

      В настройках по умолчанию =impulse-gate-open= = 3000 ms.

***** TODO Настройка импульса закрытия шлагбаума                    :rigidus:

      [TODO:rigidus] Описать проверку в виде кода.

      В настройках в =web-интерфейсе= контроллера есть поле настройки =импульса
      закрытия шлагбаума= (=impulse-gate-close=) в котором можно в милисекундах
      выставить время, в течении которого с реле закрытия шлагбаума
      (=relay-gate-close=) подаётся напряжение, т.е. стрела опускается. Когда реле
      размыкается - стрела останавливается и происходит событие =gate-close=.

      Поле =impulse-gate-close= активно для ввода значения только если актвино событие
      =detector-gate-close-disabled=, т.е [[*%D0%92%D0%BA%D0%BB%D1%8E%D1%87%D0%B8%D1%82%D1%8C%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%83%20%D1%81%20%D0%BA%D0%BE%D0%BD%D1%86%D0%B5%D0%B2%D0%B8%D0%BA%D0%BE%D0%BC%20%D0%B7%D0%B0%D0%BA%D1%80%D1%8B%D1%82%D0%B8%D1%8F%20%D1%88%D0%BB%D0%B0%D0%B3%D0%B1%D0%B0%D1%83%D0%BC%D0%B0][выключена работа с концевиком закрытия шлагбаума]].

      В настройках по умолчанию =impulse-gate-close= = 3000 ms.

***** START Включение контроля работы шлагбаума                    :pyub:noa:

<<<<<<< HEAD
      [VRFY:pyub]

=======
>>>>>>> b4ea4b2c099fbadc818e459ea5183bade6a0ea93
      В настройках в =web-интерфейсе= контроллера есть флаг включения или отключения
      =безопасного режима= работы шлагбаума =control-gate=, который управляет работой
      реле =relay-gate-stop=.

<<<<<<< HEAD
      В настройках по умолчанию безопасный режим включен  (=control-gate= -
      =enabled=), что разрешает работу шлагбаума с помощью реле =relay-gate-stop= активирую его
      перед =relay-gate-open= и =relay-gate-close= до момента получения события
      =gate-open= или =gate-close= или =gate-stop=

      Безопасный режим выключен  (=control-gate= -
      =disable=), что разрешает работу шлагбаума с помощью реле =relay-gate-stop= активирую его
      постоянно, до момента получения события =gate-stop= размыкая его.
=======
      В =безопасном режиме= работа шлагбаума разрешается только при подаче на него
      исполняемого сигнала (например, открытия или закрытия).

      Пример:
      Если во время процедуры закрытия нам необходимо остановить шлагбаум по
      срабатыванию фотоэлемента безопансости [todo:noa], мы меняем статус =реле стоп=
      (зависит от настройки [[*%D0%A0%D0%B5%D0%BB%D0%B5%20"%D1%81%D1%82%D0%BE%D0%BF"%20%D0%BD%D0%BE%D1%80%D0%BC%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%20%D0%B7%D0%B0%D0%BC%D0%BA%D0%BD%D1%83%D1%82%D0%BE][Реле "стоп" нормально замкнуто]]).
>>>>>>> b4ea4b2c099fbadc818e459ea5183bade6a0ea93

      Если безопасный режим включен(=control-gate= - =enabled=), то работа шлагбаума разрешена только при
      одновремнной подаче команды на открытие или закрытие стрелы (=relay-gate-open= и
      =relay-gate-close=). Разрешение действует до совершения событий =gate-open=,
      =gate-close= или =gate-stop= [todo:noa] Описать работу фотоэлементов.

      Если безопастный режим выключен (=control-gate= - =disabled=), то работа
      шлагбаума с помощью реле разрешена постоянно, независимо от команд открытия и
      закрытия.  Разрешение действует до совершения события =gate-stop=. [todo:noa]
      Описать работу фотоэлементов.

      В настройках по умолчанию безопасный режим включен (=control-gate= - =enabled=).

***** START Реле "стоп" нормально замкнуто                         :pyub:noa:

      [VRFY:pyub]

<<<<<<< HEAD
      В нстройках в =web-интерфейсе= контроллера есть двухпозиционый переключатель (radiobutton) -
      настройка типа реле стоп (нормально замкнутое - NC/нормально разомкнутое - NO), которая,
      определяет формат выводимых данных =relay-gate-stop=.

      По умолчанию включено состояние "нормально замкнутое - NC".
      "Нормально замкнутое - NC" это состояние при котором  =relay-gate-stop= присвоенно  =0=, при активации меняется
      на  =0=.
      "Нормально разамкнутое - NO" это состояние при котором  =relay-gate-stop= присвоенно  =1=, при активации меняется
      на  =1=.

=======
      реле стоп нормально замкнуто
      реле стоп нормально разомкнуто
>>>>>>> b4ea4b2c099fbadc818e459ea5183bade6a0ea93

      В настройках по умолчанию реле стоп - замунто, галочка установлена. (=control-= - =enabled=).

      В настройках в =web-интерфейсе= контроллера есть флаг включения или отключения
      проверки статуса =датчика статуса стрелы шлагбаума= - =концевика закрытия=,
      отвечающего за контроль статуса стрелы шлагбаума и остановку движения стрелы по
      факту её закрытия.

      В настройках по умолчанию проверка включена (=detector-gate-close= - =enabled=).
      В настройках по умолчанию =detector-gate-close= присвоен сенсорный ввод =S6=.

      Состояние =detector-gate-close= = =1= (замкнуто реле, стрела шлагбаума открыта)
      приводит к событию =gate-close=.
      Состояние =detector-gate-close= = =0= (не замкнуто реле, стрела шлагбаума НЕ
      открыта).

      Если администратор отключает датчик концевика закрытия (снимает флаг), то
      возникает событие =detector-gate-close-disabled=.

      Если проверка концевика закрытия отключена, то открытие шлагбаума и остановка
      движения стрелы происходят по параметру =импульс закрытия шлагбаума=.

**** Системные настройки
***** TODO Настройка логирования событий                               :pyub:

      В этом разделе можно установить объём хранимого системой лога событий, ограничив
      его либо по количеству записей, либо по объёму занимаемого пространства на
      SD-карте.

      Вторая настройка логирования - отправка сообщений на сервер. Если в настройках
      стойки установлен IP адрес сервера, то он автоматически добавляется и сюда. Флаг
      включает / отключает логирование.

      [WAIT] Третья настройка логирования - сохранение лога в виде текстовых файлов в
      стороннее сетевое хранлище. В адресную строку можно вбить адрес сетевой шары, а в
      дополнительные поля логин и пароль к ней. в неё (шару) стойка будет писать
      текстовые файлы, создавая каждый час новый файл. Именем файла является дата и
      время начала записи.

      По умолчанию объём лога ограничен [todo:rigidus] Надо определить как оптимальнее
      с точки зрения доступа к данным и т.п.

      По умолчанию отправка на сервер включена.

*** Тестирование и диагностика из web-интерфейса контроллера            :noa:

    [TODO:noa] Подробно описать функционал работы системы аналогичной Parking Test
    применимо к нашей системе.

    В web-интерфейсе должна быть закладка диагностики. На этой странице отображаются
    данные по всем сенсорным вводам, реле и подключениям перферийных устройств.
    В формате:
        SX (где X - номер сенсора) - есть / нет сигнал отображается разным цветом.
        BX (где Х - номер кнопки) - есть / нет сигнал  отображается разным цветом.
        RX (где Х - номер реле) - есть / нет замыкание  отображается разным цветом.

        PORTX - TYPE - MODEL (где PORT- тип порта по которому подключенно устройство, X
        - номер порта, TYPE - тип устройства, MODEL - модель устройства, STATUS - статус
        устройства отображается разными цветами зеленой-функционирует, желтый были не
        сброшенные ошибки за прошедшие сутки, красный присутствуют ошибки на данный
        момент, черный с устройством нет связи но в конфигурации оно есть.
        Должна быть кнопка тестирования которая при нажатии проводит тестировние
        устройства и возвращает список ошибок или "ошибок нет". Так же должен быть
        список ошибок возникавших за период с момента последнего сброса ошибок. Кнопка
        сброса списка ошибок по каждому устройству за прошедший период.

        Должно отображаться текущее время на контроллере, время последней
        связи/синхронизации с сервером. Данные отображаемые на дисплее стойки.


    Должно присутсвовать окно с логом замыкания/сигналами за время сессии
    теститровани(сессия нчинается при подключении к контроллеру через web
    интерфейс). Данные лога должны содержать время срабатывания, название и
    длительность сигнала для события его окончания


    Также там должен быть реализован функционал тестирования оборудования, а для
    суперадминистратора имитации финансовых операций (для простого админа запрещаем,
    т.к. это всё связано с фискальником и балансом и потом могут быть проблемы).

*** Настройки тарификации из web-интерфейса контроллера
***** TODO Включить обновление данных о тарифах с сервера           :rigidus:

      [TODO:rigidus] Описать в виде кода.

      В настройках в =web-интерфейсе= контроллера есть флаг включения или отключения
      автоматического получения, применения и =обновления данных о тарифах с сервера=.

      В настройках по умолчанию обновление включено (=tariff-autoload= -
      =enabled=). При такой настройке стойка автоматически забирает данные о времени
      и режиме работы парковки, тарифных зонах и остальных настройках раздела с
      сервера. Поля настроек защищены от редактирования и в них отображаются данные,
      полученные с сервера системы.

      Если в настройках обновление отключено (=tariff-autoload= -
      =disabled=), поля становятся доступны для редактирования и стойка оперирует выставлеными в них
      значениями вместо рассылаемых централизовано с сервера.

***** TODO Время работы стойки                                         :pyub:

      Данная настройка определяет время работы стойки. В установленный период стойка
      работает штатно, вне его переходит в [[*%D0%A1%D1%82%D0%BE%D0%B9%D0%BA%D0%B0%20%D0%B2%20%D1%81%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%B8%D0%B8%20%D0%B1%D0%BB%D0%BE%D0%BA%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B8%20(%3Dlock%3D)][состояние блокировки (=lock=)]].

      [TODO:pyub] Описать специфику блокировки по времени работы. Кроме того, мы обычно
      переходим в =lock= в случае возникновения каких-то проблем, может быть лучше
      просто выключать стойку или придумать для таких "режимных" выключений свое
      состояние, где стойка будет не реагировать ни на что, только сообщая, что "Вы что
      не видите, что у нас обед?"

      Формат настройки - поля для ввода времени в 24-х часовом формате "с HH:MM" "до HH:MM".

      Наследуется от глобальной настройки =время работы парковки= или настройки =время
      работы сектора= к которому относится стойка в =web-интерфейсе сервера=.

      [TODO:pyub] - Нужно дать ссылку на эти настройки

      Настройка по умолчанию при выключенном наследовании "с 00:00" до "23:59",
      т.е. стойка функционирует круглосуточно.

      [TODO:pyub] - Лучше просто пусть там будет ноль, а то мы можем забыть это
      специально обработать и стойка будет перезагружаться в полночь, и не дай бог там
      в это время будет вьезжать машина..

***** TODO Время работы стойки для разовых посетителей                 :pyub:

      [TODO:pyub] - Надо дать ссылки на те настройки которые уже есть и те настройки
      которые еще не описаны, но на них ссылается содержимое этого раздела

      Данная настройка определяет время работы стойки для разовых посетителей,
      использующих одноразовые проездные документы (в зависимости от комплекта
      оборудования - чеки или карты Mifare+).

      Формат настройки - поля для ввода времени в 24-х часовом формате "с HH:MM" "до HH:MM".

      Имеет приоритет над настройкой [[*%D0%92%D1%80%D0%B5%D0%BC%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B%20%D1%81%D1%82%D0%BE%D0%B9%D0%BA%D0%B8][время работы стойки]].

      Наследуется от глобальных настроек в =web-интерфейсе сервера=:
      - =время работы въезда для разовых посетителей= - для въездов и въездов
        совмещённых с оплатами
      - =время работы выезда для разовых посетителей= - для выездов и выездов
        совмещённых с оплатами
      - =время работы оплаты для разовых посетителей= - для кассовых терминалов

      Или от глобальных настроек секторов в =web-интерфейсе сервера=:
      - =время работы въезда в сектор для разовых посетителей= - для въездов и въездов
        совмещённых с оплатами
      - =время работы выезда из сектора для разовых посетителей= - для выездов и
        выездов совмещённых с оплатами

      Настройка по умолчанию при выключенном наследовании "с 00:00" до "23:59".

***** TODO Время работы для постоянных посетителей                     :pyub:

      [TODO:pyub] - Надо дать ссылки на те настройки которые уже есть и те настройки
      которые еще не описаны, но на них ссылается содержимое этого раздела

      Данная настройка определяет время работы стойки для постоянных посетителей,
      использующих [[*%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D1%8C%20%3D%D0%A1%D0%9A%D0%A3%D0%94%3D][карты СКУД]], [[*%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D1%8C%20%D0%B4%D0%BB%D1%8F%20%3D%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B%20%D1%81%20%D0%B0%D0%B1%D0%BE%D0%BD%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D0%BC%D0%B8%3D][абонементские карты]] или [[*%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D1%8C%20%D0%B4%D0%BB%D1%8F%20%3D%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B%20%D0%BF%D0%BE%20%D0%B4%D0%B5%D0%B1%D0%B5%D1%82%D0%BE%D0%B2%D1%8B%D0%BC%20%D0%BA%D0%B0%D1%80%D1%82%D0%B0%D0%BC%3D][дебетовые карты]] (в зависимости
      от комплекта оборудования - карт EM-Marine или Mifare+).

      Формат настройки - поля для ввода времени в 24-х часовом формате "с HH:MM" "до HH:MM".

      Имеет приоритет над настройкой [[*%D0%92%D1%80%D0%B5%D0%BC%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B%20%D1%81%D1%82%D0%BE%D0%B9%D0%BA%D0%B8][время работы стойки]].

      Наследуется от глобальных настроек в =web-интерфейсе сервера=:
      - =время работы въезда для постоянных посетителей= - для въездов и въездов
        совмещённых с оплатами
      - =время работы выезда для постоянных посетителей= - для выездов и выездов
        совмещённых с оплатами
      - =время работы оплаты для постоянных посетителей= - для кассовых терминалов,
        оплата дебетовых или абонементских карт, автоматическая продажа карточек при
        наличии

      Или от глобальных настроек секторов в =web-интерфейсе сервера=:
      - =время работы въезда в сектор для постоянных посетителей= - для въездов и въездов совмещённых с оплатами
      - =время работы выезда из сектора для постоянных посетителей= - для выездов и выездов совмещённых с оплатами

      Настройка по умолчанию при выключенном наследовании "с 00:00" до "23:59".

*** TODO Действия посетителя                                           :pyub:

    [TODO:pyub] - Кажется такие вещи надо описывать в [[*Общий принцип работы][Общий принцип работы]] а более
    подробно документировать в [[*Состояния стойки при проезде][Состояния стойки при проезде]]

***** Машина посетителя уезжает не завершив процедуру проезда

      Все действия посетителя аннулируются. Стойка возвращается в исходное состояние
      =finging=.

***** TODO Повторное прикладывание/некорректный билет                  :pyub:

      Посетитель пытается приложить билет от другой парковки, или самостоятельно
      сформированный билет. Дать ему по голове шлагбаумом?

*** Сообщения переферийных устройств контроллеру
**** TODO Обработка ошибок в работе термопринтера на въезде (=printer-problem=) :pyub:unrimah:rigidus:

     [TODO:unrimah] Добавить перечень возможных отказов и ошибок принтера VKP-80.

     // Набросал, коды ошибок допилю как найду.

     | индикация | число миганий | описание                                           |
     |-----------+---------------+----------------------------------------------------|
     | зеленый   |             1 | Прием данных (не ошибка)                           |
     |           |             2 | Ошибка приема (parity, frame error, overrun error) |
     |           |             3 | Команда не распознана                              |
     |           |             4 | Истекло время на прием команды                     |
     |-----------+---------------+----------------------------------------------------|
     | оранжевый |             2 | Перегрев печатающей термоголовки                   |
     |           |             3 | Закончилась бумага                                 |
     |           |             4 | Замятие бумаги                                     |
     |           |             5 | Неверное напряжение блока питания                  |
     |           |             6 | Открыта крышка                                     |
     |-----------+---------------+----------------------------------------------------|
     | красный   |             3 | Ошибка RAM                                         |
     |           |             4 | Ошибка EEPROM                                      |
     |           |             5 | Ошибка автообрезчика                               |

     [TODO:rigidus] Написать код обработки.

     [TODO:unrimah] [todo:ranma] - А как написать обработку, если я не знаю как софт может узнать
     что с термопринтером что-то не так? Ранма, мне нужно что-то что скажет мне, что
     принтеру кирдык, чтобы я смог это обработать. И еще надо подумать как это тестировать.

     Термопринтер имеет собственный набор датчиков и перечень возможных возникающих
     проблем и состояний о которых сообщениями сообщает контоллеру по RS-232.

     Получение контроллером сообщения о проблеме должно всегда приводить к отправке стойкой
     =сообщений на сервер=, в некоторых ситуациях блокировке работы принтера (=printer-error=)
     или полному переводу стойки в [[*C%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%B8%D0%B5%20%D0%B1%D0%BB%D0%BE%D0%BA%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B8%20(%3Dlock%3D)][состояние блокировки (=lock=)]].

     Только сообщение на сервер:
     - есть сигнал с оптодатчика контроля кол-ва бумаги о том, что бобина почти пуста.

     К =printer-off= приводит:
     - замятие бумаги;
     - оптодатчикидатчики контроля презентера долго заняты;
     - билет отправлен в сброс;
     - кончилась бумага.

     Если на стойке включена(ы) библиотека(и) работы с картами СКУД (=emmarine-on=) или
     транспондерами DSRC (=transponder-on=) то отключется только принтер (=printer-off=)
     и возможен проезд по картам или транспондеру.

     Если на стойке не включена ни одна из данных библиотек
     (=emmarine-off= и/или =transponder-off=) - вместе с отключением принтера
     стойка должна перейти в [[*C%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%B8%D0%B5%20%D0%B1%D0%BB%D0%BE%D0%BA%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B8%20(%3Dlock%3D)][состояние блокировки (=lock=)]].

     На дисплей в любом состоянии выводится следующая информация:
     1 строка: =сообщение текущего состояния стойки=
     2 строка: DD.MM.YYYY HH:MM (текущая дата и время)
     3 строка: Принтер неисправен
     4 строка: работа только по картам.

**** TODO Повторное прикладывание использованного билета               :pyub:
**** START Машина оказывается на датчике магнитной петли Б             :pyub:
**** TODO  Нажата кнопка "Печать билета"                               :pyub:
**** TODO  Нажата кнопка "Вызов оператора"                             :pyub:
** TODO Алгоритмы проезда                                              :pyub:

   [TODO:pyub] - Необходимо описать основные отказы и их обработку

*** Алгоритм простого въезда по чеку =barcode= =enter=

    Объявляем его как =barcode-enter=. В дальнейшем диспетчеризация поведения будет
    происходить в зависимости как от алгоритма проезда, так и от текущего состояния
    стойки. Однако чтобы давать уникальные ссылки на подразделы ниже мы включаем
    идентификатор алгоритма в название раздела

    Простой алгоритм для парковки, работающей по чекам со стандартным комплектом
    датчиков (петли А,Б и фотоэлементы). В алгоритме введены светофор и счётчик мест
    (светодиодное табло).

**** Состояние выключенной стойки (=barcode= =enter= =selftest=)

     Здесь мы просто создадим модельную стойку в этом состоянии - этот код будет частью
     теста на модели

     #+NAME: test_make_checkpoint
     #+BEGIN_SRC lisp
       (make-checkpoint :name "1" :state ":SELFTEST")
     #+END_SRC

**** TODO Состояние инициализации (=barcode= =enter= =poweron=)     :rigidus:

     Что нужно сделать при инициализации
     - Сообщить серверу о себе
     - Включить логгинг
     - Прочитать конфигурацию
     - Опросить устройства

     #+NAME: checkpoint_trans_functions
     #+BEGIN_SRC lisp
       (defun power-on ()
         "selftest -> poweron")
     #+END_SRC

**** TODO Состояние ожидания (=barcode-enter-standby=)   :rigidus:ranma:pyub:

     [TODO:rigidus] Изменить исполняемую спецификацию в соотвествии с моими изменениями.

     См. [[*%D0%A1%D1%82%D0%BE%D0%B9%D0%BA%D0%B0%20%D0%B2%20%D1%80%D0%B5%D0%B6%D0%B8%D0%BC%D0%B5%20%D0%BE%D0%B6%D0%B8%D0%B4%D0%B0%D0%BD%D0%B8%D1%8F%20(%3Dstandby%3D)][Состояние ожидания (=standby=)]]

     Когда стойка находится в состоянии ожидания на дисплей выводится следующая
     информация:
     1 строка: Стойка въезда
     2 строка: DD.MM.YYYY HH:MM (текущая дата и время)
     3 строка: информация клиента
     4 строка: информация клиента

     [TODO:pyub <- rigidus] - По этим строкам мне нужна информация, откуда брать стойку вьезда (1
     строка) и информацию клиента (3 и 4 строка), будут ли у нас двухстрочные дисплеи,
     что и как писать в полноцветный (если он будет в пилотке)

     [TODO:ranma <- rigidus] - Мне нужен способ обратиться к драйверу дисплея, чтобы передать ему
     данные и убедиться что они получены. В простейшем варианте - кусок json-а и место,
     в конфигурации, откуда я могу взять http-порт, где живет дисплей.

     [TODO: <- pyub] Я понял, что требуется. Сейчас засяду за описание блока вывода
     информации, то что мы приняли как =UIDisplay=.

     В данном состоянии замкнуто реле =Светофор сигнал 1= (=реле R4=) отвечающее за
     зелёный сигнал светофора.

     [TODO:ranma <- rigidus] - как мне замкнуть это реле?

     При нажатии на кнопку "Печать билета" (=кнопка B1=) на дисплей выводится информация:
     1 строка: нет автомобиля.

     Т.е. если машины нет на датчике А, то клиент не может сделать никаких действий -
     при нажатии на кнопку печати билета или приложении пластиковой карты стойка
     сообщает ему: "нет автомобиля"

     #+NAME: define_events
     #+BEGIN_SRC lisp
       (define-event push-button (:standby button)
         (let ((controller (get-controller-by-detector button)))
           (send-message (display controller) "Автомобиль не обнаружен")))
     #+END_SRC

     При нажатии на =кнопку B2= "Вызов оператора" переходим к обработке процедуры =вызов по IP связи=.

     При нажатии на =кнопку B3= "Разблокировка" - ничего не происходит (нет отказа).
     Данная кнопка необходима при отказах:
     - при сбое принтера см. [[*%D0%9E%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0%20%D0%BE%D1%88%D0%B8%D0%B1%D0%BE%D0%BA%20%D0%B2%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B5%20%D1%82%D0%B5%D1%80%D0%BC%D0%BE%D0%BF%D1%80%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D0%B0][Обработка ошибок в работе термопринтера]]

     При нажатии на =кнопку B4= "Запрос выезда" переходим к процедуре =внешний запрос выезда=.

     Когда машина подъезжает к стойке, срабатывает =датчик присутствия автомобиля А= перед
     стойкой (сигнал на =сенсорый ввод S1=) и контроллер получает сигнал о том,
     что машина перед стойкой. Контроллер переключается в состояние =finding=.

     #+NAME: define_events
     #+BEGIN_SRC lisp
       (define-event car-presence (:standby detector)
         (let ((controller (get-controller-by-detector detector)))
           (trans controller :standby :finding)))
     #+END_SRC

***** Настройка: Выключена проверка датчика присутсвия автомобиля А

      См. [[*%D0%92%D1%8B%D0%BA%D0%BB%D1%8E%D1%87%D0%B8%D1%82%D1%8C%20%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D1%83%20%D0%B4%D0%B0%D1%82%D1%87%D0%B8%D0%BA%D0%B0%20%D0%BC%D0%B0%D0%B3%D0%BD%D0%B8%D1%82%D0%BD%D0%BE%D0%B9%20%D0%BF%D0%B5%D1%82%D0%BB%D0%B8%20%D0%90][Выключить проверку датчика магнитной петли А]] [TODO:pyub] - Не могу перейти по этой ссылке

      Стойка автоматически автоматически переходит в =dialog=;

      #+NAME: define_events
      #+BEGIN_SRC lisp
        (define-event detector-a-disabled (:standby detector)
          (let ((controller (get-controller-by-detector button)))
            (trans controller :standby :dialog)))
      #+END_SRC

**** TODO Подьезд машины к стойке (=barcode-enter-finding=)         :rigidus:

     [TODO:rigidus] Изменить исполянемую спецификацию в соотвествии с моими изменениями.

     [[*%D0%9F%D0%BE%D0%B4%D1%8A%D0%B5%D0%B7%D0%B4%20%D0%BC%D0%B0%D1%88%D0%B8%D0%BD%D1%8B%20%D0%BA%20%D1%81%D1%82%D0%BE%D0%B9%D0%BA%D0%B5%20(%3Dfinding%3D)][Подъезд машины к стойке (=finding=)]]

     В данном случае имеем простой подъезд автомобиля.

     При переключении в состояние =finding= происходят следующие действия:
     - размыкается =светофор сигнал 1= (=реле R4=), отвечающее за зелёный сигнал на светофоре
     - замыкается =светофор сигнал 2= (=реле R5=), отвечающее за красный сигнал на светофоре
     - на сервер отправляет =сообщение= "Машина у стойки въезда".

     Т.к. мы не можем проверить исполнение данных действий, автоматически переходим в
     состояние =dialog= по факту отправки сигналов и сообщений.

     #+NAME: output_actions
     #+BEGIN_SRC lisp
       (define-action red-trafic-light (:standby :finding controller)
         (send-signal (trafic-light controller) :red))

       (define-action send-to-server-car-is-present (:standby :finding controller)
         (send-message (parent-server controller) :car-is-present))
     #+END_SRC

**** TODO Диалоговый режим (=barcode-enter-dialog=)                 :rigidus:

     См. [[*%D0%A1%D1%82%D0%BE%D0%B9%D0%BA%D0%B0%20%D0%B2%20%D0%B4%D0%B8%D0%B0%D0%BB%D0%BE%D0%B3%D0%BE%D0%B2%D0%BE%D0%BC%20%D1%80%D0%B5%D0%B6%D0%B8%D0%BC%D0%B5%20(%3Ddialog%3D)][Стойка в диалоговом режиме (=dialog=)]]

     При переходе в состояние =dialog= контроллер переводит периферийные устройства в
     режим обслуживания клиента:
     - включается подсветка кнопки печати билета (=кнопка B1=) замыкая реле подсветки (=реле R10=);

     Когда стойка находится в состоянии диалога на дисплей выводится следующая
     информация:
     1 строка: Нажмите кнопку для печати билета
     2 строка: DD.MM.YYYY HH:MM (текущая дата и время)
     3 строка (опция): информация клиента
     4 строка (опция): инофрмация клиента

     #+NAME: output_actions
     #+BEGIN_SRC lisp
       (define-action print-ticket-button-light-on (:finding :dialog controller)
         (send-signal (print-ticket-button controller) :on))

       (define-action show-display-press-button-and-get-ticket (:finding :dialog controller)
         (send-message (display controller) "Нажмите кнопку и получите билет"))
     #+END_SRC

      Когда машина находится на магнитной петеле и стойка находится в состоянии
      =finding=, но пользователем ещё не соверщены действия, инициирующие переход в состояние машина покидает зону действия датчика и стойка возвращается в
      состояние =standby=

      Клиент нажимает кнопку печати билета, сигнал с кнопки приходит на сенсорный вход
      контроллера.

      Контроллер получает сигнал и отправляет на принтер команду "напечатать билет с
      необходимой информацией" (штрих-код, зашифрованный в соответствии с
      предустановленным кодом; текущее время; номер терминала въезда; номер тарифной
      зоны; предустановленную доп. информацию).

      Пользователю на экран выводится предложение подождать.

      [TODO:rigidus] - Тут нужен таймер с watch-догом. И для пользователя и для
      принтера.

      #+NAME: define_events
      #+BEGIN_SRC lisp
        (define-event ticket-printing (:dialog print-button)
          (let ((controller (get-controller-by-print-button print-button)))
            (send-message (display controller) "Распечатывается билет... Пожалуйста подождите..")
            (send-command (printer contriller)
                          :print-ticket
                          barcode
                          current-time
                          (terminal-number controller)
                          (tariff-zone controller)
                          additional-data)))
      #+END_SRC

      Принтер печатает билет, его сенсоры контролируют состояние печати (возможно
      замятие, окончание бумаги и т.п.).

      [TODO:pyub] - Необходимо все возможные ситуации рассмотреть, вместе с их
      последствиями, т.е. что делаем в каждом из случаев.

      #+NAME: ticket_printing_emergency
      #+BEGIN_SRC lisp
        (define-emergency-event paper-jam (:dialog printer)
          (TODO))

        (define-emergency-event paper-over (:dialog printer)
          (TODO))
      #+END_SRC

      Если печать завершена успешно - билет находится в презентере и контроллер должен
      сам вызывать событие =printing-completed-successfully=

      В обработчике этого события Контроллер блокирует периферию, защищая систему от
      повторного получения въездного документа. На дисплей выводится сообщение
      "Забирите билет".

      В этом же обработчике устанавливается Watchdog timer на несколько секунд, который
      вызовет событие =get-ticket-watchdog-timer-over= если клиент не заберет билет в
      течении этого времени.

      #+NAME: define_events
      #+BEGIN_SRC lisp
        (define-event printing-completed-successfully (:dialog controller ticket)
          ;; Выключаем подсветку кнопки
          (send-signal (print-ticket-button controller) :off)
          ;; Выводим сообщение на экран
          (send-message (display controller) "Заберите билет")
          ;; Устанавливаем таймер
          (set-watchdog 5 #'get-ticket-watchdog-timer-over ticket))
      #+END_SRC

      Если билет не забран из презентера клиентом более t секунд - принтер сообщает об
      этом контроллеру, контроллер отбивает ошибку на сервер и анулирует билет.

      Это еще не все, я правильно понимаю, что надо перевести стойку в режим =finding=?
      Да.

      #+NAME: define_events
      #+BEGIN_SRC lisp
        (define-event get-ticket-watchdog-timer-over (:dialog controller ticket)
          (reset-watchdog get-ticket-watchdog-timer-over)
          (send-message (parent-server controller) :get-ticket-watchdog-timer-over)
          (ticket-cancel ticket))
      #+END_SRC

      Если клиент забирает билет из презентера, принтер сообщает об этом контроллеру,
      вызывая событие =get-printed-ticket-successfully=. Контроллер сообщает на сервер
      о том, что билет напечатан и прикладывает сам билет, а затем переходит в
      следующее состояние

      #+NAME: define_events
      #+BEGIN_SRC lisp
        (define-event get-printed-ticket-successfully (:dialog controller ticket)
          (reset-watchdog get-ticket-watchdog-timer-over)
          (send-message (parent-server controller) :get-ticket-watchdog-timer-over ticket)
          (trans controller :dialog :init))
      #+END_SRC

      [TODO:pyub] - Необходимо знать, что происходит, когда сервер получает все эти
      сообщения от контроллера.

**** TODO Инициация проезда (=barcode-enter-init=)                  :rigidus:

     При переходе в состояние =init= контроллер замыкает реле, отвечающее за открытие
     шлагбаума за стойкой (реле замкнуто либо до прихода на сенсорный ввод сигнала
     "открыт", либо по длине импульса из настроек контроллера)

     Как разделять эти два инварианта? Галочкой в настройках

     Контроллер сообщает серверу "Открытие шлагбаума стойки №"

     Если у нас нет концевика, то ставим watchdog на открытие шлагбаума

     #+NAME: output_actions
     #+BEGIN_SRC lisp
       (define-action barrier-open (:dialog :init controller)
         (send-signal (barrier controller) :open)
         (send-message (parent-server controller) :barrier-open controller)
         (if barrier-limit-switch-not-present
             (set-watchdog 5 #'barrier-open-confirm)))
     #+END_SRC

**** TODO Процедура проезда (=barcode-enter-goon=)                  :rigidus:

     Когда стрела шлагбаума открывается, в шлагбауме срабатывает концевик открытия -
     сигнал с него приходит на сенсор "открытие" контроллера. Если концевика нет, то мы
     генерируем его срабатывание по таймеру, запущенному в =barrier-open=

     Контроллер фиксирует факт того, что шлагбаум в открытом положении и совершает
     следующие действия:
      - замыкает реле, отвечающее за зелёный свет на светофоре;
      - размыкает реле, отвечающее за красный свет на светофоре;
      - сообщает серверу "Шлагбаум стойки № открыт"

     #+NAME: define_events
     #+BEGIN_SRC lisp
       (define-event barrier-open-confirm (:goon controller)
         (send-signal (trafic-light controller) :green)
         (send-message (parent-server controller) :barrier-open-confirm controller))
     #+END_SRC

     Когда машина пересекает линию фотоэлемента безопасности (стрелы шлагбаума) с
     фотоэлемента приходит сигнал на сенсор. Контроллер, имея сигнал с ф/э безопасности
     на сенсор, переходит в режим "автомобиль в воротах" - пока проезд не освобождён стрела шлагбаума
     не должна закрыться.

     Правильно ли я понимаю, что мы в этот момент должны включить красный сигнал
     светофора? Да, с момента пересечения стрелы. Так же арбитраж на другую сторону.

     #+NAME: define_events
     #+BEGIN_SRC lisp
       (define-event car-in-gate (:goon controller)
          (trans controller :goon :ingate))
     #+END_SRC

     Машина проезжает шлагбаум, с сенсорного устройства за его стрелой (контроллер
     петли индуктивности, фотоэлемент, датчик МП) на контроллер отправляется
     сигнал. Контроллер получает подтверждение завершения проезда и начинает
     соответствующую процедуру.

     #+NAME: define_events
     #+BEGIN_SRC lisp
       (define-event car-out-of-gate (:ingate controller)
          (trans controller :ingate :fin))
     #+END_SRC

**** TODO Процедура завершения проезда (=barcode-enter-fin=)        :rigidus:

     Мы считаем, что машина покинула ворота (место проезда) тогда, когда:
     - фотоэлемент не регистрирует машину под шлагбаумом
     - от сенсора за шлагбаумом пришел сигнал, что машина за шлагбаумом

     Все это вместе вызовет событие =car-out-of-gate=. Получив это событие, мы перейдем
     в состояние =fin= и контроллер сделает следующие действия:

     - размыкает реле, отвечающее за зелёный свет на светофоре;
     - замыкает реле, отвечающее за красный свет на светофоре;
     - замыкает реле, отвечающее за закрытие шлагбаума за стойкой (реле замкнуто либо
       до прихода на сенсорный ввод сигнала "закрыт" с концевика, либо по длине
       импульса из настроек контроллера)
     - сообщает серверу "проезд по билету № успешно завершен", а также об изменении
       количества мест в секторе и данные по билету
     - отправляет на табло счётчика мест по RS-485 сообщение "-1 место"

     #+NAME: define_events
     #+BEGIN_SRC lisp
       TODO
     #+END_SRC

***** Получив сигнал с концевика закрытия на сенсор контроллер:
      - размыкает реле, отвечающее за красный свет на светофоре;
      - замыкает реле, отвечающее за зелёный свет на светофоре;
      - возвращает стойку в режим ожидания =standby=.

**** TODO Cостояние блокировки (=barcode-enter-lock=)                  :pyub:

     Состояние, в которое переходит стойка в случае некорректной работы критичного для
     функционирования системы (или подсистемы) опросного [[*%3D%25type%25%20%D0%BF%D0%B5%D1%80%D0%B5%D1%84%D0%B5%D1%80%D0%B8%D0%B9%D0%BD%D1%8B%D0%B5%20%D1%83%D1%81%D1%82%D1%80%D0%BE%D0%B9%D1%81%D1%82%D0%B2%D0%B0%3D][периферийного устройства]].

     [TODO:pyub] - Не могу перейти по этой ссылке.

     Для стоек, на которых нет торгового оборудования (т.е.работы с деньгами)
     блокировка должна быть частичной. Например, если заканчивается бумага в
     термопринтере, выводится сообщение о том, что "Печать билета невозможна,
     обратитесь к персоналу парковки", но при этом въезд по пластиковым билетам
     (картам) для постоянных клиентов по врежнему возможен.  В случае возникновения
     ситуации блокировки стойка регулярно отправляеет на сервер сервисное сообщение о
     том, что она работает в нештатном режиме и требуется произвести змену бумаги /
     ремонт устрйоства.

*** TODO Алгоритм простого выезда по чеку                              :pyub:

    [TODO:pyub] - Надо описать по нормальному, так же как выше описан вьезд.

    Простейший алгоритм для парковки, работающей по чекам с стандартным комплектом
    датчиков и контроля проезда. В алгоритм введены светофор и счётчик мест
    (светодиодное табло).

    1. =Подъезд машины=
    1.1. Машина подъезжает к стойке, с сенсорного устройства у стойки (контроллер петли
    индуктивность, фотоэлемент и т.п.) на контроллер отправляется сигнал.
    1.2. Контроллер получает сигнал о том, что у стойки находится машина и из режима
    ожидания переховодит стойку в активный режим.  1.3. Замыкается реле, отвечающее за
    красный сигнал на светофоре.  1.4. На сервер отправляет инфосообщение "Машина у
    стойки выезда".
    2. =Активный режим (диалог с пользователем)=
    2.1. Контроллер переводит периферийные устройства в режим обслуживания клиента:
    - активируется широкополосный сканер штрих-кода;
    - на дисплей выдаётся информационное сообщение "Поднесите билет".
    2.2. Клиент подносит билет штрих-кодом к сканеру, данные по RS232 или USB передаются на контроллер.
    2.3. Контроллер  расшифровывает с помощью ключа шифрования (аналогичный стоит на въезде и кассах) штрих-код, получая из него информацию об оставшемся бесплатном времени (со времени въезда или времени оплаты). Он решает, исходя из заложенных в себя тарифов и параметров времени, разрешёен въезд или требуется оплата времени. см. "ПРОВЕРКА РАЗРЕШЕНИЯ ВЫЕЗДА"
    2.4. Исходя из результатов проверки контроллер выводит на дислпей сообщение "Выезд разрешён" или "Выезд запрещён, оплатите $$$ руб".
    2.5. Если выезд запрещён, контроллер блокирет перифирию до
         окончания процедуры завершения проезда (=fin=), защищая систему от повторного прикладывания чека.
    2.6. Контроллер сообщает на сервер "Выезд по билету №".
    3. =Инициация проезда=
    3.1. Контроллер получает положительный ответ от внутренних и внешних механизмов проверки оплаты билета и инициирует процедуру проезда.
    3.2. Контроллер  замыкает реле, отвечающее за открытие шлагбаума  за стойкой (реле замкнуто либо до прихода на сенсорный ввод сигнала "открыт", либо по длине импульса из настроек контроллера)
    3.3. Контроллер сообщает серверу "Открытие шлагбаума стойки №"
    4. =Процедура проезда=
    4.1. Когда стрела шлагбаума открывается, в шлагбауме срабатывает концевик открытия - сигнал с него приходит на сенсор "открытие" контроллера
    4.2. Контроллер фиксирует факт того, что шлагбаум в открытом положении совершаются следующие действия:
         - замыкает реле, отвечающее за зелёный свет на светофоре;
         - размыкает реле, отвечающее за красный свет на светофоре;
         - сообщает серверу "Шлагбаум стойки № открыт"
    4.3. Когда машина пересекает линию фотоэлемента безопасности (стрелы шлагбаума) с ф/э приходит сигнал на сэнсор.
    4.4. Контроллер, имея сигнал с ф/э безопасности на сенсор, переходит в режим "стоп" - пока сенсор не освобождён стрела шлагбаума не должна закрыться.
    4.5. Машина проезжает шлагбаум,  с сенсорного устройства за его стрелой (контроллер петли индуктивности, фотоэлемент, датчик МП) на контроллер отправляется сигнал.
    4.6. Контроллер получает подтверждение завершения проезда и начинает соответсвующую процедуру.
    5. =Процедура завершения проезда=
    5.1. Получив подтверждение окончания проезда - нет сигнала на сенсор безопасности проезда и на сенсор петли за шлагбаумом - контроллер инициирует следующеи действия:
         - размыкает реле, отвечающее за зелёный свет на светофоре;
         - замыкает реле, отвечающее за красный свет на светофоре;
         - замыкает реле, отвечающее за закрытие шлагбаума за стойкой (реле замкнуто либо до прихода на сенсорный ввод сигнала "закрыт" с концевика, либо по длине импульса из настроек контроллера)
         - сообщает серверу "выезд по билету № успешно завершен", а также об изменении количества мест в секторе и данные по билету
         - отправляет на табло счётчика мест по RS-485 сообщение "+1 место"
    5.2. Получив сигнал с концевика закрытия на сенсор контроллер:
         - размыкает реле, отвечающее за красный свет на светофоре;
         - замыкает реле, отвечающее за зелёный свет на светофоре;
         - возвращает стойку в режим ожидания;
         - сообщает на сервер о закрытии шлагбаума.

*** TODO Алгоритм проезда по карте СКУД                                :pyub:

    [TODO:pyub] - Надо описать по нормальному, так же как выше описан вьезд.

    Карты СКУД формата Em-Marine могут использоваться параллельно с билетами или картами
    Mifare (основным въездным документом). Они вносятся в базу данных администратором
    парковки и имеют ряд опций и статусов о которых подробнее будет написано в описании
    модуля СКУД. Если пользователь вместо нажатия кнопки выдачи въездного документа
    прикладывает карту СКУД и она проходит успешно проверки - это действие является
    инициирующим проезд.

    2.1. Контроллер переводит периферийные устройства в режим обслуживания клиента:
    - включается подсветка кнопки печати билета;
    - на дисплей выдаётся информационное сообщение "Нажмите кнопку и получите билет ИЛИ ПРИЛОЖИТЕ КАРТУ".
    2.2. Клиент прикладывает карту к считывателю карт. Сигнал со считывателя Em-Marine приходит на интерфейс Wiegand 26.
    2.3. Контроллер получает сигнал о том, что приложена карат имеющая номер NNNNNNNN.
    2.4. Контроллер отправляет запрос на проверку статуса карты на сервер. Сервер обрабатывает запрос и возвращает контроллеру информацию о статусе карты:
         - "есть в БД" / "нет в БД" ;
         - "на парковке" / "вне парковки";
         - "заблокирована" / "активна";
         - "есть места для данной группы" / "нет мест для данной группы".
    2.5. Контроллер получает ответ от сервера и на его основании решает - пускать ли владельца карты на парковку или нет.
    2.6. Если сигнала связи с сервером нет, то контроллер проверяет
    свою БД и опрашивает другие контроллеры, которые видит в
    сети. Решение принимается на базе самой новой из доступных записей
    о статусе карты. Тут у нас была мысль поддерживать такую же логику
    работы, которой руководствуется гит при слиянии коммитов. [TODO:pyub] =продумать поведение при обрыве связи=
    2.8. Если въезд разрешён, контроллер инициирует процедуру проезда.
    2.9. На сервер отправляет инфосообщение "Приложена карта NNNNNNNN, выезд разрешен".

** WAIT Усложнения алгоритмов                                          :pyub:

    [TODO:pyub] - Надо это все преобразовать и описать в разделе "Описание
    функциональности" - "Состояния стойки при проезде" - в соответствующих разделах где
    применяются эти усложнения

*** TODO Проезд по шлюзу / рампе

    Изменения касаются процедуры подъезда, всё начинается не с датчика присутствия у
    стойки, а с датчика в начале "шлюза" из двух шлагбаумов - одного в начале участка
    подъезда к стойке по рампе, второго - за стойкой. В данном решении присутсвуют три
    датчика присутвия - на начале шлюза, у стойки и за стрелой, а также фотоэлемент на
    линии стрелы.

    1.1. Машина начинает заезд на рампу, с сенсорного устройства в начале рампы (контроллер петли индуктивность, фотоэлемент и т.п.) на контроллер отправляется сигнал.
    1.2. Контроллер получает сигнал о том, что начат проезд рампы и переходит в режим ожидания освобождения сенсора.
    1.3. Машина начинает подъём по рампе,  сигнал с сенсорного устройства прекращается (оно остаётся позади машины).
    1.4. Контроллер фиксирует прекращение сигнала и блокирует рампу:
         - замыкает реле, отвечающее за закрытие шлагбаума №1, находящегося в начале рампы;
         - замыкает реле, отвечающее за красный свет на светофоре в начале рампы;
         - отправляет на сервер инфосообщение "Рампа занята".
    1.5. Машина подъезжает к стойке,  с сенсорного устройства у стойки (контроллер петли индуктивность, фотоэлемент и т.п.) на контроллер отправляется сигнал.
    1.6. Контроллер получает сигнал о том, что у стойки находится машина и инициирует процедуру инициации проезда.
    1.7. На сервер отправляет инфосообщение "Машина у стойки въезда".
    5.3. Контроллер открывает шлагбаум в начале рампы, зажигает зелёный свет на светофоре в начале рампы.
    5.4. На сервер отправляется сообщение "Рампа свободна".

*** WAIT Фотофиксация въезда

    В пилотнике не надо

    Опциональное действие, которое может совершаться параллельно с любым действием
    контроллера (выбирается в настрйоках контроллера). В процессе фотофиксации камера
    (или камеры), IP которой указан в настройках контролера, получает запрос на
    фотографирование, после чего возвращает контроллеру фото, которое сохраняетя им на
    SD носитель.

*** WAIT Звуковое сопровождение

    В пилотном проекте не реализуем, но - задел на будущее

    Опциональное действие, которое может совершаться параллельно с выводом сообщений на
    дисплей, дублируя их аудиозаписями, лежащими на SD носители. Данные аудиофайлы
    должны загружаться и сопоставляться с текстовыми сообщениями через интерфейс
    настройки контроллера.

    В пилотнике не надо

    Опциональное действие, которое может соврешаться параллельно с
    выводом сообщений на дисплей, дублируя их аудиозаписями, лежащими
    на SD носители. Данные аудиофайлы должны загружаться и
    сопоставляться с текстовыми сообщениями через интерфейс настройки
    контроллера.

** TODO Алгоритмы работы с автоматической кассой                       :pyub:
*** TODO Работа с автоматической кассой                                :pyub:

    АЛГОРИТМЫ СКОПИРОВАНЫ ИЗ ПАСПОРТА КАССЫ, В ПРОЦЕССЕ ДОРАБОТКИ

*** TODO Процедура оплаты                                              :pyub:

    Это последовательность действий посетителя и оператора парковки
    при проведении оплаты через автоматическую кассу.

    1. Посетитель находится у кассы.
    1.1. Подносит неоплаченный въездной билет или просроченный выездной чек к сканеру штрих-кода.
    1.2. Если посетитель потерял въездной билет или выездной чек, то он должен нажать кнопку "Оплата за утерю билета" (точная формулировка может отличаться).
    2. На дисплее выводится информация о необходимых операциях.
    2.1. В случае, если бесплатное или ранее оплаченное время ещё не истекло, на дисплей будет выведена информация об оставшемся времени нахождения на парковке.
    2.2. Если посетитель пробыл на парковке больше установленного бесплатного времени и не провёл оплату на другой кассе или производит оплату за утерю билета, система рассчитает сумму, требуемую к оплате, исходя из установленных для стойки тарифов, выведет на дисплей информацию о необходимости и размере платежа и активирует платёжное оборудование.
    3. Посетитель оплачивает услуги АПС наличными через купюроприемник (банкноты номиналом 50, 100, 500, 1000 и 5000 руб.; мод. К, БК, КМ, БКМ), монетоприёмник (монеты номиналом 1, 2, 5 и 10 руб., мод. М, КМ, БМ, БКМ) или банковской карточкой (мод. Б, БК, БМ, БКМ).
    3.1. Если оплата производится купюрами или монетами, и при внесении платежа была совершена ошибка, возможно вернуть деньги нажав кнопку "Возврат денег".
    3.2. Если оплата производится монетами, и при внесении платежа монету заклинило в монетоприёмнике, необходимо нажать на кнопку "Сброс монеты" под прорезью для монет.
    3.3. Если оплата производится с помощью банковской карты, то для активации POS-терминала необходимо нажать кнопку "Оплата картой".
    4. После оплаты касса выдаёт выездной чек и, в случае, если посетитель оплатил наличными и сумма вносимых средств превысила требуемую, сдачу. При этом на мониторе отображается оставшееся время, в соответствии с установленными тарифами, в течение которого посетитель должен покинуть парковку.

*** TODO Процедура инкассации                                          :pyub:

    2. Запросить "Х-отчет" и забрать чек. п. 3 и п. 4 только для модификаций с купюрами (К, БК, КМ, БКМ)
    3. Изъять банкнотную наличность.
    3.1. Снять бокс купюроприёмника
    3.2. Изъять купюры из бокса или взять пустой бокс купюроприёмника
    3.3. Установить пустой бокс купюроприемника на место.
    4. Восполнить банкнотную наличность для сдачи.
    4.1. Снять кассеты диспенсера с купюрами сдачи и кассету "Отказ".
    4.2. Заполнить кассеты купюрами или взять предварительно заполненные сдачей новые кассеты. Изъять неликвидные купюры из кассеты "Отказ".
    4.3. Установить кассеты на место.
    5. Провести инкассацию и закрыть смену.
    5.1. Нажать кнопку "Инкассация" и забрать чек с данными об инкассации. п. 6 и п. 7 только для модификаций с монетами (М, КМ, БМ, БКМ)
    6. Изъять полученные монеты из специального металлического ящика.
    7. После нажатия "Инкассации" выполнить перезагрузку сдачи в хопперы.
    7.1. Хопперы автоматически поочерёдно осуществят сброс всех не
         выданных в качестве сдачи монет в окно выдачи сдачи или в
         предварительно размещённую под желобами для монет ёмкость.
    7.2. Загрузите в хопперы сдачу в соответствии с установленным по умолчанию количеством сдачи. п. 8 только для модификаций с банковскими картами (Б, БК, БМ, БКМ)
    8. После нажатия "Инкассации" POS-терминал обменивается данными с банком, после чего в чек инкассации включается отчёт об эквайринговых операциях.
    9. Если на дисплее отображается надпись "Заблокировано", необходимо нажать кнопку "Разблокировка", после чего будет напечатан тестовый чек и выведена надпись "Поднесите штрих-код или карту".
    10. Закрыть дверь кассы.

*** TODO Процедура закрытия смены                              :rigidus:pyub:

    Почитать про кассовый регламент, что такое Z-отчет

    2. Запросить "Z-отчет", закрыть фискальную смену и забрать чек. Сверить суммы прибыли с чеками инкассаций и фактической прибылью.
    3. Новая смена открывается автоматически при следующей оплате.
    4. Если на дисплее отображается надпись "Заблокировано", необходимо нажать кнопку "Разблокировка", после чего будет напечатан тестовый чек и выведена надпись "Поднесите штрих-код или карту".
    5. Закрыть кассу.

** TODO Роли пользователей системы

   Описание ролей пользователей системы в рамках общего принципа функционирования.

*** Суперадминистратор (root)

    =Суперадминистратор= (=root=) - это сертифицированный обученный специалист
    производителя или подрядчика, который может осуществлять первичное конфигурирование
    и отладку контроллеов и установку дополнительных модулей на сервер. У него есть
    доступ ко всем функциям остальных пользователей системы и описанные ниже
    дополнительные возможности.

    В [[*Web-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%20%D0%B4%D0%BB%D1%8F%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B8%20%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%BB%D0%B5%D1%80%D0%B0][web-интерфейсе настройки контроллера]] =root= может:
    - устанавливать библиотеки переферийного оборудования
    - устанавливать библиотеки, связанные с доп. функциями парковки
    - разрешать/запрещать/конфигурировать удалённый доступ к контроллеру через SSH
    - иметь доступ к SSH консоли из web-интерфейса
    - производить обновление ПО, работать с удалёнными репозиториями обновлений и
      библиотек
    - производить диагностику, отладку и имитациою операций с финансовыми устройствами
      подробнее: [[*%D0%A2%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B8%20%D0%B4%D0%B8%D0%B0%D0%B3%D0%BD%D0%BE%D1%81%D1%82%D0%B8%D0%BA%D0%B0%20%D0%B8%D0%B7%20web-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D0%B0%20%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%BB%D0%B5%D1%80%D0%B0][Тестирование и диагностика из web-интерфейса контроллера]]

    На [[*Web-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%20%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0][web-интерфейсе сервера]] =root= может:
    - конфигурировать интерфейсы остальных групп пользователей
    - устанавливать библиотеки и модули, связанные с доп. функциями работы парковки
      (по факту их продажи клиенту)
    - разрешать / запрещать / конфигурировать удалённый доступ к серверу через SSH
    - иметь доступ к SSH консоли сервера из web-инетрфейса
    - ПО, работать с удалёнными репозиториями обновлений и библиотек
    - осуществлять связь серверов друг с другом, настраивать каскады серверов,
      связывать их с системой биллинга
    - конфигурировать части системы, связанные с интеграцией с другими системами

    Доступ root должен быть ограничен паролем и, в идеале, ещё чем-то. Ключевым
    файлом, SSH сертификатом и т.п.

*** Администратор (admin)

    =Администратор= cистемы - это сотрудник клиента, владеющего парковочной системой,
    отвечающий за настройку и функционирование систмы и производяший конечную настройку
    системы непосредственно по факте эксплуатации решения.

    В [[*Web-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%20%D0%B4%D0%BB%D1%8F%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B8%20%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%BB%D0%B5%D1%80%D0%B0][web-интерфейсе настройки контроллера]] =администратор= может:
    - отслеживание логов событий контроллера
    - конфигурирование настроек LAN контроллера
    - производить [[*%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B8%20%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B0%20%D0%B8%D0%B7%20web-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D0%B0%20%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%BB%D0%B5%D1%80%D0%B0][настройки администратора из web-интерфейса контроллера]],
      конфгурировать работу установленного и подключённого переферийного оборудования
    - производить диагностику, отладку и имитацию работы сенсоров, реле и переферийного
      оборудования кроме торгового оборудования ([[*%D0%A2%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B8%20%D0%B4%D0%B8%D0%B0%D0%B3%D0%BD%D0%BE%D1%81%D1%82%D0%B8%D0%BA%D0%B0%20%D0%B8%D0%B7%20web-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D0%B0%20%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%BB%D0%B5%D1%80%D0%B0][тестирование и диагностика из web-интерфейса контроллера]])
    - подключать или отключать стойки от общения, обмена данными и тарифами с видимыми им серверами
    - управлять временем, информацией, выводимой на дисплей стоек и печатаемой на чеках

    Доступ администратора к настройкам оборудования определяется установленными
    пользователем =root= библиотеками.

    Весь функционал web-интерфейса контроллера должен быть также доступен через общий
    web-интерфейс сервера (выбор стойки -> настройка)

    На [[*Web-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%20%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0][web-интерфейсе сервера]] =администратор= может:
    - отслеживать все логи о работе парковки в целом, создавать выгрузки и отчёты
      истории событий
    - получать информацию о настрйоках и состоянии всех стоек, терминалов и касс, находящихся в
     локальной сети и подключенных к серверу
    - изменять IP-адреса, ключей шифрования, номера подключённых стоек
    - управлять пользователями, создавая и удаляя их, разнося по созданным =root=
      группам доступа к страницам интерфейса
    - управлять секторами парковки и тарифными зонами, временем работы парковки,
      тарифными сетками

*** TODO Оператор                                                      :pyub:

    =Оператор= - это человек из обслуживающего персонала парковки, который
    отвечает за некую определённую сферу функционирования системы и следит за ней в
    процессе эксплуатации.

    Имеет доступ к системе только через [[*Web-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%20%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0][web-интерфейс сервера]] или через отдельную утилиту.

    Можно выделить несколько основных функций операторов (они могут быть совмещены или разделены).

**** Парковщик (parker)

     Парковщик должен иметь следующие возможности:
     - открытие и закрытие шлагбаумов, подключённых к стойкам, находящимся в локальной сети.
     - управление количеством свободных мест на парковке.
     - мониторинг информации, приходящей со стоек (лога) в режиме реального времени.

**** Кассир (casher)
**** СКУД
*** Бухгалтер

    =Бухглатер= - это человек из обслуживающего персонала парковки, отвечающий за
    работу финансовой системы, установку тарифов, проведение инкассаций, соблюдение и
    выполнение кассового порядка и т.д. Иногда роль совмещена с ролью
    =оператора-кассира=.

    Имеет доступ к системе только через [[*Web-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%20%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0][web-интерфейс сервера]] или через отдельную
    утилиту.

*** Посетитель парковки

    =Посетитель= - это клиент парковки, который оставляет своё транспортное средство на
    её территории. Он взаимодействует с системой с помощью интерфейсов стоек и касс,
    либо через персонал парковки.

* Этапы, сроки, задачи

  Список текущих задач. По факту завершения задачи обязательно закрывать её в статус DONE,
  писать сопроводительную записку и переносить весь подраздел задачи с описанием в
  соотвествующий данной задаче раздел документации.

** TODO Этапы и сроки
*** Пилотный функционал (до 1 марта 2016)
**** Рабочий вьезд/выезд по билетам и картам СКУД

     В рамках пилотного проекта нам необходимо реализовать следующий комплект оборудования стойки:
     [[*%D0%92%D1%8A%D0%B5%D0%B7%D0%B4%D0%BD%D0%B0%D1%8F%20/%20%D0%B2%D1%8B%D0%B5%D0%B7%D0%B4%D0%BD%D0%B0%D1%8F%20%D1%81%D1%82%D0%BE%D0%B9%D0%BA%D0%B0%20%D1%81%20%D0%B2%D1%8B%D0%B4%D0%B0%D1%87%D0%B5%D0%B9%20%D0%B1%D1%83%D0%BC%D0%B0%D0%B6%D0%BD%D0%BE%D0%B3%D0%BE%20%D0%B1%D0%B8%D0%BB%D0%B5%D1%82%D0%B0,%20%D0%A1%D0%9A%D0%A3%D0%94%20%D0%B8%20IP-%D1%81%D0%B2%D1%8F%D0%B7%D1%8C%D1%8E%20(%D0%BF%D0%B8%D0%BB%D0%BE%D1%82)][Въездная / выездная стойка с выдачей бумажного билета, СКУД и IP-связью]]

     Для стойки должны работать следующие базовые алгаритмы работы парковки:
     [[*%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D0%BE%D0%B3%D0%BE%20%D0%B2%D1%8A%D0%B5%D0%B7%D0%B4%D0%B0%20%D0%BF%D0%BE%20%D1%87%D0%B5%D0%BA%D1%83][Алгоритм простого въезда по чеку]]
     [[*%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D0%BE%D0%B3%D0%BE%20%D0%B2%D1%8B%D0%B5%D0%B7%D0%B4%D0%B0%20%D0%BF%D0%BE%20%D1%87%D0%B5%D0%BA%D1%83][Алгоритм простого выезда по чеку]]
     [[*%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC%20%D0%BF%D1%80%D0%BE%D0%B5%D0%B7%D0%B4%D0%B0%20%D0%BF%D0%BE%20%D0%BA%D0%B0%D1%80%D1%82%D0%B5%20%D0%A1%D0%9A%D0%A3%D0%94][Алгоритм проезда по карте СКУД]]

     Для стоек въезда и выезда должен быть реализован базовый интерфейс и [[*%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B8%20%D0%B0%D0%B4%D0%BC%D0%B8%D0%BD%D0%B8%D1%81%D1%82%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B0%20%D0%B8%D0%B7%20web-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D0%B0%20%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%BB%D0%B5%D1%80%D0%B0][настройки администратора из web-интерфейса контроллера]]

**** Базовый интерфейс сервера

     В рамках пилотного проекта должен быть базовый UI сервера: [[*Web-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%20%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0][Web-интерфейс сервера]]
     Необходимо сделать возможность удалённого управления шлагбаумами для оператора,
     просмотра логов событий и конфигурирования стоек для адмиинистратора, модуль СКУД,
     модуль настройки и рассылки тарифов на стойки и модуль кассира для приёма оплаты за
     услуги парковки.

**** Система СКУД Em-Marine

     Необходимо реализовать работу карты СКУД стандарта EM-Marine в составе:
     - функционирующего [[*%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC%20%D0%BF%D1%80%D0%BE%D0%B5%D0%B7%D0%B4%D0%B0%20%D0%BF%D0%BE%20%D0%BA%D0%B0%D1%80%D1%82%D0%B5%20%D0%A1%D0%9A%D0%A3%D0%94][алгоритма проезда по картам СКУД]];
     - реализованногов UI сервера [[*%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D1%8C%20%3D%D0%A1%D0%9A%D0%A3%D0%94%3D][модуля СКУД]] для внесения карт доступа в систему и
       управления ими.

**** Ручная касса на базе ПК

     Необходимо реализовать [[*%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D1%8C%20%3D%D0%BA%D0%B0%D1%81%D1%81%D0%B8%D1%80%D0%B0%3D][модуль кассира]] для возможности приёма оплаты за услуги
     парковки. Кассир, с помощью UI на своём персональном компьютере, должен считывать
     информацию со штрих-кода билета (сканером, подключённым к ПК по USB),
     самостоятельно принимать оплату, после чего система должны печатать фискальный
     чек (на фискальном регистраторе, подключённом к ПК по USB или COM RS-232).

     В качестве сканера предлагается использовать любой =ручной сканер Honeywell/Metrologic Eclipse=

     В качестве фискального регистратора использвать ККМ  =Штрих-Light-ФР-К (100)= или
     =Искра ПРИМ-08ТК=.

     Для считывания карт EM-Marine используется настольный считыватель =IronLogic Z-2 USB=.

**** Логгирование на сервере
**** Все контроллеры должны уметь звук на SIP-е
*** Функционал второго этапа (с 1 марта 2016)
**** Автоматизированная касса купюры+монеты (до 1 апреля 2016)
**** Гибкие системы тарификации (до 1 июня 2016)
**** Работа с видеокамерами по событиям (до 1 июня 2016)
**** Работа кассы с банк-терминалами (до 1 июня 2016)
**** Автоматизация продажи абонементов и дебетовых карт на кассе (до 1 июля 2016)
**** Паркомат
**** Билинг паркомата
**** Аггрегирующий сервер
**** Премиум (ресайклеры, выдача карт, свистоперделки)
**** Распознавание номеров
**** Интеграции с API
** Задачи общего характера
*** START [pyub] Описание алгоритмов взаимодействия постетителя и АСПП
*** WAIT [ranma] Отладка и интеграционное тестирование
*** WAIT [all] Проверка элементов системы на макете прототипа
** Задачи hardware
*** DONE [bda]Выбор микрокомпьютера для контроллера
*** DONE [pyub] Покупка плат BeagleBone Black и Development Kit
*** DONE [bda] Подбор редких комплектующих для платы расширения
    Сформирован список: https://octopart.com/bom-lookup/g1agjT7N/75pqkJDrUqGv7qrq
*** DONE [ranma] Дерганье ногами на BBB
    [TODO:ranma] - Я хочу пример кода и как его юзать.
    http://hertaville.com/introduction-to-accessing-the-raspberry-pis-gpio-in-c.html
*** TODO [bda] Подбор основной части комплектующих для платы расширения
*** DONE [noa] Поиск и заказ идущих долго комплектующих

    Необходимо по спискам из задач подбора комплектующих найти поставщиков в России
    через данный ресурс: http://passport.efind.ru/org/
    Далее, сделать заказ по списку.

*** START Трассировка базовой платы
*** START Трассировка платы расширения расширения
*** TODO [unrimah ranma] - Обеспечить возможность дергать ногами GPIO при отправке JSON-а
*** TODO [unrimah ranma] - Обеспечить возможность управлять дисплеем через JSON
*** TODO [unrimah] RTC needed (battery etc.)
*** WAIT [unrimah] Макетирование прототипа
** Задачи software контроллер

   Описание конечно-автоматной работы системы и ее верификации.

*** TODO Описать =happy-cases=                                :pyubnrimah:
**** DONE На алгоритмы проезда
**** TODO На алгоритмы оплаты
**** TODO Совмещенные алгоритмы
*** TODO Составление исполняемой спецификации, внесение описаний работы и кейсов :rigidus:
*** DONE Выделить состояния контроллера (стоек)                        :pyub:
*** TODO Список событий контроллера (стоек)                            :pyub:
*** TODO Составить конечный автомат                                 :rigidus:
*** START Декларативное описание конечных автоматов                 :rigidus:
*** START Написание генератора кода модели системы                  :rigidus:
*** START Ручная верификация работы системы на модели               :rigidus:
*** START Расширение модели рабочим кодом                           :rigidus:
*** START Автоматическая верификация работы системы                 :rigidus:
*** START Тестирование рабочего кода на прототипе устройства        :rigidus:
*** TODO Создание UI web-интерфейса для настройки контроллера
** Задачи периферии контроллера
*** TODO Создание списка периферии и сведение документации по ней      :pyub:
** Задачи сервер                                                    :rigidus:
*** WAIT Разработка структуры БД
*** WAIT Разработка софтверной части для сервера
*** WAIT Разработка интерйефса сервера
* WAIT Протоколы обмена данными                                :rigidus:pyub:

  [TODO:pyub] Особенно важный ГЛОБАЛЬНЫЙ кейс - общение стоек между собой
  отсутствия связи - надеюсь мы не будем поднимать это пока не сдадим пилотный
  проект.

  Контроллеры и рабочие станции соединяются с центральным сервером по локальной сети,
  используя стек протоколов TCP/IP.

  Некоторые периферийные компоненты системы могут связываться с контроллерами или
  непосредственно с сервером и рабочими станциями по интерфейсу RS-485

  Между стойками сети реализуем GIT [TODO:rigidus]

** Принцип построения сети и взаимодействрия контроллеров и сервера

   Часть функций система должна выполнять, когда устройства (контроллер и сервер)
   работают в автономном режиме (например при обрыве связи по Ethernet).

   Изначально закладывается одноранговая структура автоматического взаимодействия
   сервера и контроллера. Т.е. сервер и все контроллеры в сети постоянно обмениваются
   функциональными сервисными сообщениями, синхронизируя свои данные о происходящем на
   парковке. Сервер является аггрегатором функциональных и информационных сообщений
   (истории лога), а также имеет приоритет настройки и управления элементами системы
   (например тарифы установленные на сервере приоритетны для контроллеров, если на них
   не выставлена обратная настройка) во всех случаях, кроме связанных с безопасностью
   (например, если с сервера пришёл сигнал "закрыть шлагбаум", а стойка считает, что
   датчик безопасности закрытия стрелы шлагбаума занят - шлагбаум не закрывается).

   Таким образом возможны три сценария сбоя:
   - одна или несколько стоек теряют связь с одной или несколькими стойками и сервером (две автономные группы)
   - все стойки теряют свзяь с сервером (две автономные группы)
   - несколько групп, состоящих из одной или нескольких стоек, теряют связь друг сдругом и / или сервером (более двух автономных групп).

** Принцип автономной работы контроллера

   Работа контроллера в случае обрыва связи с сервером осуществляется следующим
   образом. Билет считывается сканером штрих кодов. Время и код билета сохраняются в
   памяти контроллера. Решение об открытии ворот принимается охранником (на билете
   напечатано время въезда). При восстановлении связи архив информации о билетах
   передается на центральный сервер.

   Когда и если контроллер остаётся без связи со всей остальной системой он должен
   максимально полноценно выполнять заложенные в него функции автоматизации:
   - Для въезда, выезда, проезда и совмещённых с оплатой решений:
     - открывать и закрывать шлагбаум, контролировать состояние шлг.
     - управлять сигнальными устройствами (светофорами, счётчиками мест)
     - контролировать состояние датчиков присутсвия и безопасности
   - Для въездов
     - для штрих-кода: шифровать в код информацию о въезде / для Mifare: записывать информацию о въезде на карту
   - Для выездов, касс, проездных стоек:
     - выдавать выездной документ разовым посетителям
     - иметь инфомацию о тарифах (исходя из сложной системы тарификации)
     - считывать информацию с въездного документа и обрабатывать её

* Контроллер
** Гибкость и оптимизация

   Плата и программное обеспечение должны быть выполнены так, чтобы была возможность
   масштабирования системы и при этом сохранения обратной совместимости программного
   обеспечения. Например, в определённый момент возникнет необходимость увеличить
   количество реле или COM-портов на плате, будет осуществлена доработка связанная с
   переразводкой, но при этом на новых контроллерах должно штатно работать и старое ПО,
   а на старых контроллерах работать новое ПО.

** Аппаратная часть
*** DONE Выбор микрокомпьютера

    http://beagleboard.org/support/bone101

*** TODO Принципиальная схема контроллера                       :unrimah:noa:
*** TODO Вписать в таблицы данные по потреблению переферии, сигнальным уровням и необходимости изоляции :noa:

    Чтобы осмысленно строить защиту от статики, неправильного монтажа, наводок по земле
    и т.п. надо понимать что из себя представляет переферия с электрической точки
    зрения.

    Для наглядности представления информации неплохо бы её занести в соответствующие
    таблицы.

*** WAIT Схемотехника базовой платы
*** WAIT Схемотехника плат расширения
  1. Плата дополнительных UART
  2. Плата дополнительных USB
  3. Плата дополнительных сенсоров
  4. Плата дополнительных реле
  5. Плата GSM-модема

*** WAIT Оптимизация цены решения

    Возможные шаги
    - Уменьшить размер ПЗУ на BBB с 4 Гб -> 1 Гб.
    - Выкинуть microHDMI c BBB
    - Выкинуть miniUSB (slave) c BBB, переразвести на UART, отказаться от доп. питания. Сервисный UART нужен.
    - Выкинуть "настоящий" USB-host разъем c BBB  => развести на доп. ноги => переразвести на шину => до USB-hub. Удлинить гребенку контактов.
    - Замена на платах расширения I2C конвертеров на ПЛИС.
    - Пробивание уменьшения цены за сроки поставки.
    - Выход на большие партии у непосредственно производителей. Например, http://www.element14.com/community/search.jspa?q=BeagleBonE+Black
    - Есть интересная модификация BBB: http://www.mentorel.ru/promyshlennyj-modul-na-zamenu-beaglebone-black/

**** TODO Подготовка для заказа на контрактной сборке                  :pyub:
** Периферийное оборудование
   [TODO:santi] Собрать здесь ссылки на протоколы обмена для каждого 
   конкретного устройства.
*** Дисплей монохромный
    монохромный 2, 4 строки
*** Дисплей цветной сенсорный
*** Клавиатура
*** Термопринтеры
*** ККМ
*** Сканеры штриховых кодов
*** Приёмники купюр
*** Диспнесеры купюр
*** Приёмник монет
*** Хоппер (диспенсер монет)
*** Ресайклер купюр
*** Ресайклер монет
*** Считыватели карт EM-Marine, Mifare
*** Приёмник карт
*** Диспенсер карт
*** Ресайклер карт
*** Терминал банковских карт
*** Транспондер DSRC

    Статья, описывающая систему: http://habrahabr.ru/post/240047/

    Даташит на пример устройства лежит в devices/DSRC.

    =DSRC= (Dedicated Short Range Communication) - беспроводная связь на короткое
    расстояние. Частота несущей в диапазоне 5.8 ГГц. Линии связи DSRC находят
    применение, главным образом, в системах электронного платежа, так как для этой
    технологии были завершены стандарты на уровне Европейского Союза (CEN/TC278 и
    ETSI). Линия связи DSRC состоит из двух основных частей, а именно: из блока =OBU=
    (On-Board Unit - устройство в транспортном средстве) и блока =RSE= (Road Side
    Equipment - устройство на дороге), которые обмениваются данными.

** Зависимости периферии

  [TODO:noa] Расписать зависимости


*** Дисплей монохромный
    Диалоговые режимы работы

    необходимые устройства:
    -Клавиатура
*** Дисплей цветной
    Диалоговые режимы работы

    необходимые устройства:
    -Клавиатура/сенсор дисплея
*** Сенсор дисплея
    Диалоговые режимы работы

    необходимые устройства:
    -Цветной дисплей
*** Клавиатура
    Диалоговый режим работы

    необходимые устройства:
    -дисплей сенсорный/монохромный
*** Термопринтеры
    Въезд по билетам
    Безналичный расчет

    необходимые устройства:

*** ККМ
    Оплата наличными
    Безналичный расчет
*** Сканеры штриховых кодов
    Оплата билетов
    Выезд по карам
*** Приёмники купюр
    Прием купюр
*** Диспнесеры купюр
    Выдача купюр
*** Приёмник монет
    Прием монет

    необходимые устройства:
    -прием монет
*** Хоппер (диспенсер монет)
    Выдча монет
*** Ресайклер купюр
    Прием бумажной наличности
    Выдача бумжной наличности
*** Ресайклер монет
    Прием монет
    Выдача монет
*** Считыватели карт EM-Marine, Mifare
    Работа с картами
*** Приёмник карт
    Приме карт
*** Диспенсер карт
    Выдача карт
*** Ресайклер карт
    Прием карт
    Выдача карт
*** Терминал банковских карт
    Безналичный расчет

    необходимые устройства:
    -термопринтер/ККМ
*** Транспондер DSRC
    Работа с радиометками
** Подключение периферии к контроллеру
*** Периферийные устройства контроллера и протоколы связи

    Документация по всему периферийному оборудованию лежит тут: [[file://home/pyub/repo/asp/devices][devices]]

    #+CAPTION: Периферийное оборудовани
     |    | Тип устройства                       | Предлагаемая модель                | Интерфейс подключения   | Необходимое питание (мА) | Изоляция (Y/N) |
     |----+--------------------------------------+------------------------------------+-------------------------+--------------------------+----------------|
     |  1 | Термопринтер                         | Custom VKP80II                     | RS-232 / USB            |                          |                |
     |  2 | Фискальный регистратор               | Искра ПРИМ-21К 03                  | RS-232 / USB            |                          |                |
     |  3 | Сканер штрихкодов широкополосный     | Honywell IS3480 QuantumE           | RS-232 / USB            |                          |                |
     |  4 | Сканер штрихкода / QR-кода           | не выбрана                         | RS-232 / USB            |                          |                |
     |  5 | Диспенсер карт Mifare+               | не выбрана                         | RS-232 / USB            |                          |                |
     |  6 | Картоприёмник Mifare+                | не выбрана                         | RS-232 / USB            |                          |                |
     |  7 | Считыватель карт Em-Marine           | Iron Logic Mifare + Matrix II MF-I | Wiegand 26              |                          |                |
     |  8 | Считыватель карт Em-Marine           | Iron Logic Matrix V / Matrix II EH | Wiegand 26              |                          |                |
     |  9 | Дисплей монохромный символьный 16*4  | Winstar / Long                     | 6800 / SPI              |                          |                |
     | 10 | Дисплей цветной графический TFT-LCD  | Winstar / Long                     | RGB / MCU               |                          |                |
     | 11 | Купюроприемник                       | CashCode SM (MSM)                  | ID003 / CCNET           |                          |                |
     |    |                                      | ICT L77F                           | RS-232                  |                          |                |
     | 12 | Монетоприемник                       | ICT UCA2                           | RS-232                  |                          |                |
     | 13 | Диспенсер купюр                      | Puloon LCDM-1000/2000/4000         | RS-232                  |                          |                |
     |    |                                      | ICT ND 300 KM                      | RS-232                  |                          |                |
     | 14 | Хоппер                               | ICT Leonid Mini Hopper             | ccTalk / Hopper         |                          |                |
     | 15 | Ресайклер монет                      | не выбрана                         | RS-232                  |                          |                |
     | 16 | POS банк-терминал                    | не выбрана                         | RS-232 / USB / Ethernet |                          |                |
     | 17 | Табло счётчика мест / инфотабло      | не выбрана                         | RS-485                  |                          |                |
     | 18 | Ультразвуковой датчик наличия машины | не выбрана                         | RS-485                  |                          |                |
     | 19 | Магнитный датчик наличия машины      | не выбрана                         | RS-485                  |                          |                |

*** Выводы на аудио оборудование

    Делаем в пилотнике. Поднимаем Астерикс

    #+CAPTION: Аудио-оборудование
     |    | Предлагаемая модель | Тип устройства    |
     |----+---------------------+-------------------|
     | 20 | Jack 3,5 мм TS      | Вывод на динамик  |
     | 21 | Jack 3,5 мм TS      | Вывод на микрофон |

*** Выводы на сухой контакт реле                                    :unrimah:

    Это реле.


    #+CAPTION: Выходы - сухой контакт
     |    | Тип / описание назанчения           | Название в системе | Реле по умолчанию |
     |----+-------------------------------------+--------------------+-------------------|
     | 22 | Шлагбаум открытие (вверх)           | =relay-gate-open=  | R1                |
     | 23 | Шлагбаум закрытие (внизз)           | =relay-gate-close= | R2                |
     | 24 | Шлагбаум стоп                       | =relay-gate-stop=  | R3                |
     | 25 | Светофор сигнал 1                   | =relay-sign-1=     | R4                |
     | 26 | Светофор сигнал 2                   | =relay-sign-2=     | R5                |
     | 27 | Светофор сигнал 3                   | =relay-sign-3=     | R6                |
     | 28 | Подсветка кнопки                    | =relay-backlight=  | R7                |
     | 29 | Доп. реле управления смежными устр. | -                  | R8                |


*** Вводы сигналов с датчиков                                       :unrumah:

    #+CAPTION: Сенсорный ввод
     |    | Тип / описание назначения       | Название в системе    | Ввод по умолчанию | Домен развязки | Типичный уровень сигнала | Маскимальное напряжение при ошибке монтажа |
     |----+---------------------------------+-----------------------+-------------------+----------------+--------------------------+--------------------------------------------|
     | 32 | Датчик присутсвия автомобиля А  | =detector-a=          | S1                | присутствие    |                          |                                            |
     | 33 | Датчик присутсвия автомобиля Б  | =detector-b=          | S2                | присутствие    |                          |                                            |
     | 34 | Датчик завершения проезда рампы | =detector-c=          | S3                |                |                          |                                            |
     | 35 | Концевки открытия шлагбаума     | =detector-gate-open=  | S4                | шлагбаум       |                          |                                            |
     | 36 | Концевик закрытия шлагбаума     | =detector-gate-close= | S5                | шлагбаум       |                          |                                            |
     | 37 | Фотоэлемент безопасности        | =detector-safety=     | S6                | шлагбаум       |                          |                                            |
     | 38 | Датчик грузового транспорта     | =detector-truck=      | S7                |                |                          |                                            |
     | 39 | Резерв                          | -                     | S8                |                |                          |                                            |

*** Вводы с кнопок

    #+CAPTION: Кнопки
****     Функции
     |    | Функции                                         |
     |----+-------------------------------------------------|
     | 40 | Сигнализация А (техническая зона)               |
     | 41 | Сигнализация В (финансовая зона)                |
     | 42 | Вызов оператора                                 |
     | 43 | ОТМЕНА                                          |
     | 44 | ПОДТВЕРЖДЕНИЕ                                   |
     | 45 | Навигация Вверх                                 |
     | 46 | Навигация Вниз                                  |
     | 47 | Оплата ШТРАФА                                   |
     | 48 | X-отчет                                         |
     | 49 | Z-отчет                                         |
     | 50 | Копия Z-отчета                                  |
     | 51 | Печать чека (въезд)                             |
     | 52 | Инкассация                                      |
     | 53 | Изъятие/внесение (?)                            |
     | 54 | Разблокировка (hardware)                        |
     | 55 | Тестовая печать                                 |
     | 56 | Сервисный режим (удержание, кнопка с фиксацией) |
     | 57 | Запрос проезда (разрешение)                     |
     | 58 | Открытие проезда (удержание)                    |
     |    | Конфиг контроллера (?)                          |

****     Внешние кнопки
     |   |                     |                    |      |                                                  |
     |   | Осн. режим          | В сервисном режиме | Name |                                                  |
     |---+---------------------+--------------------+------+--------------------------------------------------|
     |   | Вызов оператора     |                    | B1   |                                                  |
     |   | ОТМЕНА              | Предыдущее меню    | B2   |                                                  |
     |   | ПОДТВЕРЖДЕНИЕ       | Выбор меню         | B3   |                                                  |
     |   | Навигация Вверх     | Предыдущий пункт   | B4   |                                                  |
     |   | Навигация Вниз      | Следующий пункт    | B5   |                                                  |
     |   | Оплата ШТРАФА       | Конфиг контроллера | B6   | IP/тип/статус сязи с сервером/состояние на экран |
     |   | Печать чека (въезд) | Тестовая печать    | B7   |                                                  |
     |   | Резерв              | Резерв             | B8   |                                                  |

****     Внутренние кнопки
     |   | Осн. режим                                      | В сервисном режиме                            | Name |
     |---+-------------------------------------------------+-----------------------------------------------+------|
     |   | Основной режим (Разомкнута конопка с фиксацией) | Сервесный режим (замкнута кнопка с фиксацией) | B9   |
     |   | X-отчет                                         | Z-отчет                                       | B10  |
     |   | Разблокировка (hardware)                        | Копия Z-отчета                                | B11  |
     |   | Аварийное открытие проезда (удержание)          | Инкассация                                    | B12  |
     |   | Запрос проезда (разрешение по процедуре)        | Изъятие/внесение (?)                          | B13  |
     |   | Сигнализация А (техническая зона)               | Сигнализация А (техническая зона)             | B14  |
     |   | Сигнализация В (финансовая зона)                | Сигнализация В (финансовая зона)              | B15  |
     |   | Резерв                                          | Резерв                                        | B16  |



*** Кроссировка RJ45 для подключения внешних устройств
    В паралель к текущим вводам выводм контроллера на плате должны быть установленны
    следующие разъемы RJ45. С возможностью размыкать джамперами или переключать питание
    на второй ввод питания на контроллер части линий.
    |  № | Функция                                                  | Разъм | Пин | Вывод     | Цвет по B | Дополнительно                   |
    |----+----------------------------------------------------------+-------+-----+-----------+-----------+---------------------------------|
    |  1 | Открыть шлагбаум                                         |     1 |   1 | R1.1      |           |                                 |
    |  2 | Закрыть шлагбаум                                         |     1 |   2 | R2.1      |           |                                 |
    |  3 | Остановить шлагбаум                                      |     1 |   3 | R3.1      |           |                                 |
    |  4 | Общий от открыть шлагбаум                                |     1 |   4 | R1.2      |           | размыкается джампером 1 от R3.2 |
    |  5 | Общий от закрыть шлагбаум                                |     1 |   4 | R2.2      |           | размыкается джампером 2 от R3.2 |
    |  6 | Общий от остановить шлагбаум                             |     1 |   4 | R3.2      |           |                                 |
    |  7 | Шлагбаум открыт                                          |     1 |   5 | S4.1      |           |                                 |
    |  8 | Шлагбаум закрыт                                          |     1 |   6 | S5.1      |           |                                 |
    |  9 | Общий от шлагбаум открыт                                 |     1 |   7 | S4.2      |           |                                 |
    | 10 | Общий от шлагбаум закрыт                                 |     1 |   8 | S5.2      |           |                                 |
    |----+----------------------------------------------------------+-------+-----+-----------+-----------+---------------------------------|
    |  1 | Красный Светофор U+                                      |     2 |   1 | U1/U2     |           | выбирается джампером 3          |
    |    |                                                          |     2 |   2 | U1/U2     |           |                                 |
    |  2 | Красный Светофор GND                                     |     2 |   3 | R4.2      |           | GND1/GND2 джампером 4           |
    |    |                                                          |     2 |   4 | R4.2      |           |                                 |
    |  3 | Зеленый Светофор U+                                      |     2 |   5 | U1/U2     |           | выбирается джампером 5          |
    |    |                                                          |     2 |   6 | U1/U2     |           |                                 |
    |  4 | Зеленый Светофор GND                                     |     2 |   7 | R5.2      |           | GND1/GND2 джампером 6           |
    |    |                                                          |     2 |   8 | R5.2      |           |                                 |
    |----+----------------------------------------------------------+-------+-----+-----------+-----------+---------------------------------|
    |  5 | Дополнительный Светофор U+                               |     3 |   1 | U1/U2     |           | выбирается джампером 7          |
    |    |                                                          |     3 |   2 | U1/U2     |           |                                 |
    |  6 | Дополнительный Светофор GND                              |     3 |   3 | R6.2      |           | GND1/GND2 джампером 8           |
    |    |                                                          |     3 |   4 | R6.2      |           |                                 |
    |  7 | Дополнительное реле                                      |     3 |   5 | R8.1      |           |                                 |
    |    |                                                          |     3 |   6 | R8.1      |           |                                 |
    |  8 | Дополнительное реле общий                                |     3 |   7 | R8.2      |           |                                 |
    |    |                                                          |     3 |   8 | R8.2      |           |                                 |
    |----+----------------------------------------------------------+-------+-----+-----------+-----------+---------------------------------|
    |  1 | Питание RS485 U+                                         |     4 |   1 | U1/U2     |           | выбирается джампером 9          |
    |  2 | Питание RS485 Gnd                                        |     4 |   2 | GND1/GND2 |           | выбирается Джампером 10         |
    |  3 | Host RS485 A                                             |     4 |   3 |           |           |                                 |
    |  4 | Host RS485 B                                             |     4 |   4 |           |           |                                 |
    |  5 | Host RS485 Gnd                                           |     4 |   5 |           |           |                                 |
    |  6 | Client RS485 A                                           |     4 |   6 |           |           |                                 |
    |  7 | Client RS485 B                                           |     4 |   7 |           |           |                                 |
    |  8 | Client RS485 Gnd                                         |     4 |   8 |           |           |                                 |
    |----+----------------------------------------------------------+-------+-----+-----------+-----------+---------------------------------|
    |  1 | Питание устройства U+                                    |     5 |   1 | U1/U2     |           | выбирается джампером 11         |
    |  2 | Питания Устройства Gnd                                   |     5 |   2 | GND1/GND2 |           | выбирается джампером 12         |
    |  3 | Датчик присутствия автомобиля A                          |     5 |   3 | S1.1      |           |                                 |
    |  4 | Датчик присутствия автомобиля Б                          |     5 |   4 | S2.1      |           |                                 |
    |  5 | Общий датчика присутствия А                              |     5 |   5 | S1.2      |           |                                 |
    |  6 | Общий датчика присутствия Б                              |     5 |   6 | S2.2      |           |                                 |
    |  7 | Резервный датчик                                         |     5 |   7 | S8.1      |           |                                 |
    |  8 | Общий резервного датчика                                 |     5 |   8 | S8.2      |           |                                 |
    |----+----------------------------------------------------------+-------+-----+-----------+-----------+---------------------------------|
    |  1 | Вызов оператора                                          |     6 |   1 | B1.1      |           |                                 |
    |  2 | Отмена/Предыдыдущее меню                                 |     6 |   2 | B2.1      |           |                                 |
    |  3 | Подтверждение/Выбор меню                                 |     6 |   3 | B3.1      |           |                                 |
    |  4 | Навигация вверх/Предыдущий пункт                         |     6 |   4 | B4.1      |           |                                 |
    |  5 | Навигация вниз/Следующий пункт                           |     6 |   5 | B5.1      |           |                                 |
    |  6 | Оплата штрафа/Конфиг контроллера                         |     6 |   6 | B6.1      |           |                                 |
    |  7 | Печать чека/Тестовая печать                              |     6 |   7 | B7.1      |           |                                 |
    |  8 | Общий кнопок лицевой панели                              |     6 |   8 | B1-7.2    |           |                                 |
    |----+----------------------------------------------------------+-------+-----+-----------+-----------+---------------------------------|
    |  1 | Сервисный режим NO/NC                                    |     7 |   1 | B9.1      |           |                                 |
    |  2 | Х-отчет/Z-отчет                                          |     7 |   2 | B10.1     |           |                                 |
    |  3 | Разблокировка(Hardware)/Копия Z-отчета                   |     7 |   3 | B11.1     |           |                                 |
    |  4 | Аварийное открытие проезда(Удержание)/Инкассация         |     7 |   4 | B12.1     |           |                                 |
    |  5 | Запрос проезда(разрешение по процедуре)/изъятие-внесение |     7 |   5 | B13.1     |           |                                 |
    |  6 | Сигнализация А/Сигнализация А(техническая зона)          |     7 |   6 | B14.1     |           |                                 |
    |  7 | Сигнализация Б/Сигнализация Б(финансовая зона)           |     7 |   7 | B15.1     |           |                                 |
    |  8 | Общий внутренних кнопок                                  |     7 |   8 | B9-15.2   |           |                                 |
    |----+----------------------------------------------------------+-------+-----+-----------+-----------+---------------------------------|
    |  1 | Питание фотоэлемента безопасности                        |     8 |   1 | U1/U2     |           | выбирается джампером 13         |
    |  2 | Питание фотоэлемента безопасности                        |     8 |   2 | GND1/GND2 |           | выбирается джампером 14         |
    |  3 | Фотоэлемент безопстности                                 |     8 |   3 | S6.1      |           |                                 |
    |  4 | Общий фотоэлемента безопастности                         |     8 |   4 | S6.2      |           |                                 |
    |  5 | Датчик грузового транспорта                              |     8 |   5 | S7.1      |           |                                 |
    |  6 | Общий датчика грузового транспорта                       |     8 |   6 | S7.2      |           |                                 |
    |  7 | Арбитраж шина                                            |     8 |   7 |           |           | Размыкается джампером 15        |
    |  8 | Арбитраж обвязка                                         |     8 |   8 |           |           |                                 |
    |----+----------------------------------------------------------+-------+-----+-----------+-----------+---------------------------------|
    |  1 | Питание фотоэлемента безопасности                        |     9 |   1 | U1/U2     |           | выбирается джампером 13         |
    |  2 | Питание фотоэлемента безопасности                        |     9 |   2 | GND1/GND2 |           | выбирается джампером 14         |
    |  3 | Фотоэлемент безопстности                                 |     9 |   3 | S6.1      |           |                                 |
    |  4 | Общий фотоэлемента безопастности                         |     9 |   4 | S6.2      |           |                                 |
    |  5 | Датчик грузового транспорта                              |     9 |   5 | S7.1      |           |                                 |
    |  6 | Общий датчика грузового транспорта                       |     9 |   6 | S7.2      |           |                                 |
    |  7 | Датчик завершения проезда рампы                          |     9 |   7 | S3.1      |           |                                 |
    |  8 | Общий датчика завершения проезда рампы                   |     9 |   8 | S3.2      |           |                                 |
    |----+----------------------------------------------------------+-------+-----+-----------+-----------+---------------------------------|
    |  5 | Дополнительный светофор U+                               |    10 |   1 | U1/U2     |           | выбирается джампером 7          |
    |  6 | Дополнительный светофор GND                              |    10 |   2 | R6.2      |           | GND1/GND2 джампером 8           |
    |  1 | Дополнительное реле                                      |    10 |   3 | R8.1      |           |                                 |
    |  2 | Общий дополнительного реле                               |    10 |   4 | R8.2      |           |                                 |
    |  5 | Дтчик завершения проезда рампы                           |    10 |   5 | S3.1      |           |                                 |
    |  6 | Общий датчика завершения проезда рампы                   |    10 |   6 | S3.2      |           |                                 |
    |  3 | Резервный датчик                                         |    10 |   7 | S8.1      |           |                                 |
    |  4 | Общий резервного датчика                                 |    10 |   8 | S8.2      |           |                                 |

*** Оценка максимального кол-ва подключений устройств               :unrumah:

    Максимальная комплектация, оплата совмещённая с выездной стойкой в вариантах на
    чеках и картах.

    #+CAPTION:Периферийное оборудование
      |    | Тип устройства                                           | Предлагаемая модель                    | Интерфейс подключения    |
      |----+----------------------------------------------------------+----------------------------------------+--------------------------|
      |  1 | Фискальный регистратор / Термопринтер                    | Искра ПРИМ-21К 03 / Custom VKP80II     | RS-232                   |
      |  2 | Сканер штрихкодов широкополосный / Приёмник карт Mifare+ | Honywell IS3480 QuantumE / не выбирали | RS-232                   |
      |  3 | Диспенсер карт Mifare+ / Ресайклер карт Mifare+          |                                        | RS-232                   |
      |  4 | Считыватель карт Em-Marine / Mifare                      | Iron Logic Matrix V / Matrix II EH     | Wiegand 26               |
      |  5 | Дисплей монохромный символьный 16*4                      | Winstar / Long                         | 6800 / SPI / I2C         |
      |  6 | Дисплей цветной графический TFT-LCD                      | Winstar / Long                         | RGB / MCU                |
      |  7 | Купюроприемник / Ресайклер купюр                         | CashCode SM (MSM)                      | ID003 / CCNET cmpt.RS232 |
      |  8 | Монетоприемник / Ресайклер монет                         | ICT UCA2                               | RS-232                   |
      |  9 | Диспенсер купюр                                          | Puloon LCDM-1000/2000/4000             | RS-232                   |
      | 10 | Хоппер                                                   | ICT Leonid Mini Hopper                 | ccTalk cmpt.RS232        |
      | 11 | POS банк-терминал                                        | не выбрана                             | USB / Ethernet           |
      | 12 | Вввод RS-485                                             | не выбрана                             | RS-485                   |
      | 13 | Вывод RS-485                                             | не выбрана                             | RS-485                   |
      | 14 | GSM промышленный                                         | не выбрана                             | GPRS RS-232              |

    #+CAPTION:Базовая плата
      |    | Интерфесы              | Подключаемое оборудование |   |
      |----+------------------------+---------------------------+---|
      |  1 | Основные GPIO (o)      | Шлагбаум (3)              |   |
      |    |                        | Светофор (3)              |   |
      |    |                        | Доп. реле (3) ???         |   |
      |  2 | Основные GPIO (i)      | Токовые петли (3)         |   |
      |    |                        | Конц. шлагбаума (2)       |   |
      |    |                        | Фотоэл. безоп. (1)        |   |
      |    |                        | Датчик грузового (1)      |   |
      |  3 | Основные GPIO (i/o)    | Арбитраж (1)              |   |
      |  4 | I2C GPIO               | Универсальные кнопки (8)  |   |
      |  5 | I2C + 1 GPIO@I2C       | Малый дисплей             |   |
      |  6 | [TODO:unrimah] ???     | Большой дисплей           |   |
      |  7 | I2C-GPIO-Wiegand26     | Считыватель карт MF/EH    |   |
      |  8 | I2C-RS232 not isolated | Принтер/Фиск. регистратор |   |
      |  9 | +1  RS232 not isolated | сканер ШК/приемник MF+    |   |
      | 10 | I2C-RS485 isolated     | Табло своб. мест          |   |
      | 11 | +1  RS485 isolated     | not used in base          |   |
      | 12 | I2C+I2S                | Аудио                     |   |
      |    |                        |                           |   |

    #+CAPTION:Плата расширения
      |   | Интерфейсы            | Подключяемое оборудование                       |                                         |
      |---+-----------------------+-------------------------------------------------+-----------------------------------------|
      | 1 | I2C-RS232             | Диспенсер карт Mifare+ / Ресайклер карт Mifare+ |                                         |
      |   | I2C-RS232-ID003/ccNET | Купюроприемник / Ресайклер купюр                |                                         |
      | 2 | I2C-RS232             | Монетоприемник / Ресайклер монет                |                                         |
      |   | I2C-RS232             | Диспенсер купюр                                 |                                         |
      | 3 | I2C-RS232-ccTALK      | Хоппер                                          |                                         |
      |   | I2C-RS232             | Industrial Cell Network Modem                   |                                         |
      | 4 | USB                   | POS банковский терминал                         | Есть вопрос, подключать ли прямо в ВВВ  |
      |   |                       |                                                 | или городить отдельный хаб на extBoard, |
      |   |                       |                                                 | можно это оставить на переразводку      |
      |   |                       |                                                 | home edition                            |

*** Стандартные комплекты периферийных устройств
**** Въездная / выездная стойка с выдачей бумажного билета, СКУД и IP-связью (пилот) :unrimah:

     [TODO:unrimah] Привести таблицу в понятный тебе вид.

     Также подключены светофор и табло со счётчиком мест.

     #+CAPTION:Переферийное оборудование
      |    | Тип устройства                        | Предлагаемая модель                       | Интерфейс подключения | Важность для работы сиситемы и функционал                                                                                                           |
      |----+---------------------------------------+-------------------------------------------+-----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------|
      |  1 | Термопринтер / Сканер штрих-кода      | Custom VKP80II / Honywell IS3480 QuantumE | RS-232                | Опрашиваемое и критичное - при выходе из строя или определённых сигналов с датчиков блокировка проезда по чекам                                     |
      |  2 | Считыватель карт Em-Marine            | Iron Logic Matrix V / Matrix II EH        | Wiegand 26            | Опциональное (возможно ли сделать опросным?) - при неиспр. блок. СКУД                                                                               |
      |  3 | Дисплей монохромный символьный 16*4   | Winstar / Long / МЭЛТ                     | I2C                   | Опциональное                                                                                                                                        |
      |  4 | Таблое свеетодиодное, счетчик мест    | не выбрана                                | RS-485 IN             | Опциональное                                                                                                                                        |
      |----+---------------------------------------+-------------------------------------------+-----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------|
      |  5 | Вывод на динамик                      | Jack 3,5 мм TS                            |                       | Опциональное                                                                                                                                        |
      |  6 | Вывод на микрофон                     | Jack 3,5 мм TS                            |                       | Опциональное                                                                                                                                        |
      |----+---------------------------------------+-------------------------------------------+-----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------|
      |  7 | Шлагбаум вверх                        | R1                                        |                       | По замыканию реле подаётся напряжение на плату управления шлагбаума, стрела поднимается                                                             |
      |  8 | Шлагбаум вниз                         | R2                                        |                       | По замыканию реле подаётся напряжение на плату управления шлагбаума, стрела опускается                                                              |
      |  9 | Шлагбаум стоп                         | R3                                        |                       | По замыканию реле подаётся напряжение на плату управления шлагбаума, движение стрелы принудительно останавливается                                  |
      | 10 | Светофор сигнал 1                     | R4                                        |                       | По замыканию реле ток идёт на группу диодов светофора зелёного цвета                                                                                |
      | 11 | Светофор сигнал 2                     | R5                                        |                       | По замыканию реле ток идёт на группу диодов светофора красного цвета                                                                                |
      |----+---------------------------------------+-------------------------------------------+-----------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------|
      | 12 | Датчик присутсвия автомобиля А        | S1                                        |                       | В случае отсутсвия сигнала - система не работает корректно, отключаемо оператором                                                                   |
      | 13 | Датчик присутсвия автомобиля Б        | S2                                        |                       | В случае отсутсвия сигнала - система не работает корректно, отключаемо оператором                                                                   |
      | 14 | Концевки открытия шлагбаума           | S5                                        |                       | Если есть сигнал - система думает, что шлг. открыт                                                                                                  |
      | 15 | Концевик закрытия шлагбаума           | S6                                        |                       | Если есть сигнал - система думает, что шлг. закрыт                                                                                                  |
      | 16 | Фотоэлемент безопасности              | S7                                        |                       | Если есть сигнал - система думает, что на линии ф/э ннчего нет, если нет - сигнал на реле шлагбаум стоп                                             |
      | 17 | Кнопка 1 - Печать билета              | B1                                        |                       | Отправка команды на принтер на печать билета и срабатывание арбитража, если надо                                                                    |
      | 18 | Кнопка 2 - Вызов оператора (IP-связь) | B2                                        |                       | Вызов по IP-связи на установленный в настройках стойки терминал связи                                                                               |
      | 19 | Кнопка 3 - Разблокировка              | B3                                        |                       | Вывод стойки из состояния блокировки, в которое она может войти в случе неиспрвности критичного устрйоства                                          |
      | 20 | Кнопка 4 - Завпрос открытия шлг.      | B4                                        |                       | Отправка команды на открытие шлагбаума (опционально в настройках - либо всегда, либо только при наличии машины, либо только в состоянии блокировки) |

*** Максимальная комплектация, оплата совмещённая с выездной стойкой в вариантах на чеках и картах.

    #+CAPTION:Переферийное оборудование
     |    | Тип устройства                                           | Предлагаемая модель                    | Интерфейс подключения    |
     |----+----------------------------------------------------------+----------------------------------------+--------------------------|
     |  1 | Фискальный регистратор / Термопринтер                    | Искра ПРИМ-21К 03 / Custom VKP80II     | RS-232                   |
     |  2 | Сканер штрихкодов широкополосный / Приёмник карт Mifare+ | Honywell IS3480 QuantumE / не выбирали | RS-232                   |
     |  3 | Диспенсер карт Mifare+ / Ресайклер карт Mifare+          |                                        | RS-232                   |
     |  4 | Считыватель карт Em-Marine / Mifare                      | Iron Logic Matrix V / Matrix II EH     | Wiegand 26               |
     |  5 | Дисплей монохромный символьный 16*4                      | Winstar / Long                         | 6800 / SPI / I2C         |
     |  6 | Дисплей цветной графический TFT-LCD                      | Winstar / Long                         | RGB / MCU                |
     |  7 | Купюроприемник / Ресайклер купюр                         | CashCode SM (MSM)                      | ID003 / CCNET cmpt.RS232 |
     |  8 | Монетоприемник / Ресайклер монет                         | ICT UCA2                               | RS-232                   |
     |  9 | Диспенсер купюр                                          | Puloon LCDM-1000/2000/4000             | RS-232                   |
     | 10 | Хоппер                                                   | ICT Leonid Mini Hopper                 | ccTalk cmpt.RS232        |
     | 11 | POS банк-терминал                                        | не выбрана                             | USB / Ethernet           |
     | 12 | Вввод RS-485                                             | не выбрана                             | RS-485                   |
     | 13 | Вывод RS-485                                             | не выбрана                             | RS-485                   |
     | 14 | GSM промышленный                                         | не выбрана                             | GPRS RS-232              |

** Программная платформа
*** TODO Архитектура программного обеспечения

    Архитектура системы, уровни алгоритмов работы с оборудованием

**** Описание и цели

  Этот файл описывает интерфейсы нижнего архитектурного уровня =HardwarePresentationLayer=,
  предназначенного для представления оборудования в виде абстракции для следующих
  архитектурных уровней.
  Этот архитектурный уровень выполняет функцию преобразования представления
  данных от различных вариантов подключенного конкретного оборудования в единообразное
  представление абстрактного оборудования для =BusinessLogicLayer= и наоборот.

  Цели:
  - предоставить уровню бизнес-логики =BusinessLogicLayer=
    единообразный интерфейс работы с любым набором оборудования
  - взять на себя работу с параметрами конкретного подключенного
    оборудования.

**** Уровни и компоненты архитектуры

     [TODO:ranma] - Выкинуть все гавно (почистить). Я очень хочу чтобы я прочитал весь
     этот раздел и сказал: "Ага, тут все понятно".
     [COMMENT:ranma] Я тоже этого офигеть как хочу. Но это получится не с первой итерации 
     скорее всего.
***** Глоссарий

   =BusinessLogic= - всё, что связано с логикой работы системы

   =Hardware= - всё, что связано с оборудованием

   =Software= - всё, что связано с исполняемым ПО

   =UI= (user interface) - всё, что связано с интерфейсом пользователя

   =Presentation= - представление конкретного оборудования в памяти в виде структур
   данных и событий.

   =Component= - функциональный блок в составе архитектуры проекта, описывающий решение
   отдельной задачи.

***** Слой =BusinessLogicLayer=

   =BusinessLogicLayer= - это слой описания конкретных процессов для абстрактного
   функционального оборудования.

   [TODO: rigidus] Опиши по возможности, на какие компоненты может быть поделен
   =BusinessLogicLayer= такое разделение поможет шарить работу по возможности.
   например.

   [note:rigidus] Невозможно сказать на какие компоненты можно разделить бизнес-логику
   и как ее делить. Это не декомпозиционная задача. Мы моделируем поведение конечными
   автоматами, где есть состояния и переходы между ними. Нельзя это дальше как-то
   делить, вопрос поставлен неверно. Иногда декомпозиция - не лучший метод справиться
   со сложностью.

***** Слой =HardwarePresentationLayer=

   =HardwarePresentationLayer= - это нижний слой архитектуры на котором конкретное
   оборудование преобразуется в абстрактное представление для =BusinessLogicLayer=. Это
   то как для бизнес-логики выглядят конкретные устройства.

***** Компонент =HardwareDisplayComponent=

    =HardwareDisplayComponent= - это компонент, отвечающий за отображение конкретных
    данных на разные типы конкретных дисплеев. Т.е. мы отсылаем на дисплей сообщение в
    =DisplayPresentationComponent=, а этот уровень определяет как это будет отображено.

    =DisplayPresentationComponent= - это компонент, представляющий абстрактное описание
    информации, должной быть отраженной на дисплее. При каждом обновлении компонент
    передает изменения в описании в =HardwareDisplayComponent=.

    [TODO:santi ranma unrimah] Обсудить озвученный ниже вопрос по PresentationComponent
    =UIPresentationComponent= - это компонент представления тех частей оборудования,
    которые являются интерфейсом пользователя.

    =LogicPresentationComponent= - это компонент представления тех частей оборудования,
    которые связаны с бизнес-логикой.

    [COMMENT:ranma] Cуществуют данные, которые являются одновременно и интерфейсом
    пользователя и данными/событиями для бизнес-логики. Какой компонент будет отвечать
    за представление таких данных?  Например, событие "чек на въезд распечатан"
    относится только к бизнеслогике.

    А событие "нажата кнопка выдачи чека на въезд" относится одновременно и к UI и к
    бизнес-логике. Но это искусственное разделение.  На самом деле нет разницы между
    событием от UI и событием - следствием автоматического процесса.

    Таким образом я считаю, что разделение на UI и Logic не требуется и достаточно
    сделать один компонент, вот такой: =DevicePresentationComponent= - это компонент,
    содержащий абстрактное представление всех конкретных устройств, включая элементы
    UI. Он отвечает за прием данных от =HWDeviceComponent= и от =BusinessLogicLayer=
    и за преобразование принятых данных в абстрактное представление из реального и обратно.

    =HWDeviceComponent= - это компонент, отвечающий за работу непосредственно с
    подключенным оборудованием.  Он производит прием и передачу данных через
    =CommunicationComponent=. Он записывает в оборудование настройки из
    =HardwareSettingComponent=. Прием и передача производятся посредством проприетарных
    протоколов.

    =CommunicationComponent= - это компонент, отвечающий за работу с коммуникационным
    оборудованием: UARTs, sockets, etc.  Он настраивает оборудование согласно
    настройкам из =CommunicationSettingComponent= для настроек, относящихся только к
    локальному коммуникационному оборудованию и из =HardwareSettingComponent= для
    настроек, относящихся к корректному обмену с подключенным оборудованием.  Например:
    Размер системных буферов для UART это вопрос =CommunicationSettingComponent=, а
    вопрос скорости обмена с оборудованием - =HardwareSettingComponent=.

***** Слой =DriverLayer=

   Это аппаратно-зависимые компоненты - драйвера конкретных устройств, устанавливаемые,
   как модули ядра. Большинство модулей уже имеется в ядре Linux, как-то GPIO,
   коммуникациционный стек, etc.
   Драйверы могут понадобиться для редких дисплеев, некоторых RTC и иной периферии.

   =DisplayComponent= - драйвер дисплея.

***** Обособленный слой =SettingLayer= - не, это просто PostgreSQL
****** Компонент =CommunicationSettingComponent=

    =CommunicationSettingComponent= - это компонент, оперирующий всеми настройками
    коммуникационного оборудования для работы с контроллером. Например, скорость работы
    с COM-портом для общения конкретного устройства с контроллером.

****** Компонент =HardwareSettingComponent=

    =HardwareSettingComponent= - это компонент, оперирующий конкретными командамми
    настроек оборудования (например, скорость печати принтера). По сути на это уровень
    диспетчиризации между BL и железом по протоколу предоставленному разработчиком.

****** Компонент =BusinessLogicSettingComponent=

    =BusinessLogicSettingComponent= - настройки бизнес-логики, т.е. работы системы в
    зависисмости от различных условий.

****** Компонент =SoftwareSettingComponent=

    =SoftwareSettingComponent= - настройка функционирования ПО (например, логирование,
    настройки пользователей и ролей), находящиеся в неком хранилище (базе данных).

****** Компонент =NotificationComponent=

    =NotificationComponent= - оповещает все архитектурные слои о произошедшем изменении
    настроек.

***** Слой =UILayer=

   =UILayer= - это уровень описывающий пользовательские интерфейсы удаленного доступа .

   =SWUIcomponent= это различные операторские и администраторские web-интерйесы
   серверов и контроллеров (ПО управления парковкой) и

   =HWUIComponent= это интерфейсы собственно стоек для посетителей- дисплеи с текстом и кнопки
   клавиатуры.

**** Архитектура уровня представления

***** Абстрактный базовый класс CBaseDevice

Является базовым классом для классов устройств.
Реализует паттерн Strategy для конкретных классов от базовых CBaseCodec
и CBaseCommCtl.
Реализует композицию для подключения уровня SettingsLayer для доступа
классов устройств к своим настройкам.
Предоставляет интерфейс классам конкретных устройств.

***** класс CDeviceFactory

Реализует паттерн Abstract Factory для классов конкретных устройств.

***** класс конкретного устройства

Реализует функционал коммуникации с устройством, периодического опроса и
формирования сигналов состояния.

например CBarrierReleDown это устройство управления реле для опускания шлагбаума.
Протокол для пина отсутствует.
Пин управляет физическим импульсом опускания шлагбаума.

***** Абстрактный базовый класс CBaseCodec

Является базовым классом для классов кодеков протоколов.
Создание объектов управляется классом конкретного устройства.
Конкретный кодек подключается как Strategy к классу устройства.

***** класс CCodecFactory

Реализует паттерн Abstract Factory для классов кодеков протоколов.

***** класс конкретного кодека для протокола

Реализует функции encode и decode, которые сериализуют  и десериализуют
данные и создают обертку для них согласно протоколу.

***** класс CBaseCommCtl

Является базовым классом для классов управления коммуникационными каналами
связи: UARTs, GPIO, TCP/IP sockets.
То есть конкретных классов будет 3 штуки.
Конкретный класс подключается как Strategy к классу устройства.

***** класс CCommCtlFactory

Реализует паттерн Abstract Factory для классов управления коммуникационными каналами.

***** класс конкретного комм. канала

CUartCtl - настраивает уарт согласно параметрам.
CPinCtl - настраивает пин согласно параметрам.
CTcpSocketCtl - настраивает сокет, запускает сервер или коннектится клиентом,
поддерживает соединение установленным.

***** класс CAbstractDeviceManager

Предоставляет API для доступа к статистике по абстрактным устройствам и для
доступа к API самих абстрактных устройств.
Создает классы абстрактных устройств и линкует их с классами конкретных устройств.
Включает в себя TCP/IP сервер, к которому может подключаться как бизнеслогика,
так и бэк-енд веб морды для непосредственного контроля или даже ручного управления.

***** класс абстрактного устройства CAbstractDevice<Type>

Содержит структуры данных, представляющие любое устройство данного функционального назначения.
Предоставляет API для доступа к этим данным.

***** класс CDeviceAbstractFactory

Инкапсулирует правила создания абстрактных устройств для одного или нескольких конкретных.
Создает эти устройства.

**** Порядок работы уровня представления

1. Менеджер устройств запускает функцию создания архитектуры устройств создавая в  цикле
классы конкретных устройств. Фабрика классов конкретных устройств читает настройки
с заданным номером и инстанцирует конкретное устройство, и так
в цикле, пока все существующие в настройках устройства не будут созданы.
2. При этом каждое конкретное устройство читает свои настройки протокола и коммуникационного
канала после чего инстанцирует и настраивает их согласно параметрам.
3. Тест канала и тест устройства. На этом этапе устанавливается факт наличия устройства, если
это возможно. Собирается статистика об ошибках.
4. Если есть ошибки, то программа обращается к классу CErrorLogic, который инкапсулирует
логику обработки ошибок.
5. Менеджер устройств анализирует результат теста и может выдать событие =devices-error=
в случае, если ошибки были признаны логикой обработки.
6. Иначе менеджер запускает процесс инициализации устройств.
7. Менеджер устройств анализирует результат инициализации и может выдать событие =devices-error=.
Менеджер завершает функцию создания архитектуры и устройства остаются готовыми принимать команды
и отдавать события.
8. Иначе менеджер выдает событие =devices-ready=
9. Менеджер завершает функцию создания архитектуры устрoйств, устройства готовы
к работе.
10. В процессе работы устройство может перейти в неисправное состояние. В этом случае также
происходит обращение к классу CErrorLogic и может образоваться событие =devices-error=.

**** Что на чём пишем

  =BL= - LISP [rigidus]

  =SW= - PostgreSQL & LISP [rigidus], PostgreSQL & C++ [ranma].

  Чисто движком БД мы здесь не обойдемся, так как требуются оповещения об изменении
  настроек. rigidus утверждает, что обойдемся.
  [TODO:rigidus] Создание таблиц БД с настройками и триггеров на оповещение об 
  изменнении настроек.

  =HW,COM= - C++,boost [ranma,unrimah]

  =KernelModules= - C [ranma,unrimah]

**** Требования к функционалу =HardwarePresentationLayer=
***** Получение данных и формирование событий

   Получение данных от датчиков и оборудования и формирование по ним событий для уровня
   =BusinessLogicLayer= по определенным правилам.

   Организация внутренних таймеров для выработки событий в случаях недостатка датчиков,
   согласно ТЗ.

***** Асинхронная работа с оборудованием по вызовам от =BusinessLogicLayer=

   Асинхронная работа с конкретным оборудованием парковки подразумевает возможность
   подать команду, запросить состояние или получить событие от оборудования независимо
   от текущей работы по с другим оборудованием, если только это оборудование не
   разделяет физические ресурсы с тем, с которым в текущий момент нужно вести работу.

   [TODO:ranma] "Поведение при занятости физического ресурса" - ты говоришь о занятом
   порте или сокете?
   [COMMENT:ranma] Речь о любом ресурсе, который разделяется между более чем одним внешним устройством.
   Да, в тч сокет, порт, пин etc

***** Cписок конкретного оборудования, которое должно поддерживаться

   В списке абстрактного оборудования (на данный момент он только абстрактный) будут
   вложенями даны ссылки на конкретное оборудование: [[file:doc.org::*%d0%9f%d0%b5%d1%80%d0%b8%d1%84%d0%b5%d1%80%d0%b8%d0%b9%d0%bd%d0%be%d0%b5%20%d0%be%d0%b1%d0%be%d1%80%d1%83%d0%b4%d0%be%d0%b2%d0%b0%d0%bd%d0%b8%d0%b5][периферийное оборудование]] (в
   doc.org)

   Полное раскрытие списка оборудования, сенсоров и кнопок: [[file:doc.org::*%D0%9F%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BF%D0%B5%D1%80%D0%B8%D1%84%D0%B5%D1%80%D0%B8%D0%B8%20%D0%BA%20%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%BB%D0%B5%D1%80%D1%83][Подключение периферии к
   контроллеру]] (в doc.org) В графе "Тип устройства" описан абстрактный тип, в графе
   "Предполагаемая модель" конкретная модель, в графе "Интерфейс подключения" -
   собственно интерфейс.

   [COMMENT:pyub] До описания протоколов обмена данными мы пока не дошли. Это задача
   [TODO:unrimah].

****** Протокол обмена с картоприемником

    Структуры данных, ссылка.

****** Управление и контроль шлагбаума

    Команды и события, ссылка.

****** Управление и контроль термопринтера

    Структуры данных, ссылка.

****** Список используемых датчиков

    Уровни логических сигналов для состояний.  [[file:doc.org::*%D0%92%D0%B2%D0%BE%D0%B4%D1%8B%20%D1%81%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D0%BE%D0%B2%20%D1%81%20%D0%B4%D0%B0%D1%82%D1%87%D0%B8%D0%BA%D0%BE%D0%B2][Вводы сигналов с датчиков]]

****** Список кнопок

    Уровни логических сигналов для состояний.

    [[file:doc.org::*%D0%92%D0%B2%D0%BE%D0%B4%D1%8B%20%D1%81%20%D0%BA%D0%BD%D0%BE%D0%BF%D0%BE%D0%BA][Вводы с кнопок]]

***** Асинхронная работа с коммуникационным оборудованием

   =Асинхронная работа= - это работа с каналом связи без блокировки этого канала при
   передаче по нему данных.

теы с любым каналом связи без
   необходимости блокировки как остальных каналов, так и текущего активного канала

 с коммуникационным оборудованием подразумевает возможность
   приема/передачи данных независимо от текущей работы по с другим коммуникационным
   оборудованием.

   Список каналов:
   - communication ports
   - IO pins
   - usb
   - ethernet (tcp/ipv4)

****** Список оборудования, подключаемого к =CommunicationComponent=

    Оборудование, подключаемое к =CommunicationComponent=

****** Список датчиков, подключаемых к =CommunicationComponent=

    Оборудование, подключаемое к =GPIO= - датчики 'сухой контакт'.

****** Список реле, подключаемых к =CommunicationComponent=

    Оборудование, подключаемое к =GPIO= - управление типа 'реле'.

****** Список оборудование, подключаемого к usb

    Оборудование, подключаемое к =usb=.

****** Ethernet

    Cвязь с сервером по =ethernet=: =сеансовый уровень=.

    [comment:pyub] связь контроллера с контроллером по =ethernet=?
    [COMMENT:ranma] какого контроллера с каким контроллером?

***** Преобразование данных между конкретным и абстрактным представлениями

   [COMMENT:pyub] Правильно ли я понимаю, что абстрактное представление это, например,
   "сигнал датчика арбитража", а конкретное представление - это "12В с реле =R7= стойки
   выигравшей арбитраж на сенсорный ввод =S4= стойки проигравшей арбитраж"?
   [COMMENT:ranma] Да.

   Список оборудования (на данный момент абстрактный): [[file:doc.org::*%d0%9f%d0%b5%d1%80%d0%b8%d1%84%d0%b5%d1%80%d0%b8%d0%b9%d0%bd%d0%be%d0%b5%20%d0%be%d0%b1%d0%be%d1%80%d1%83%d0%b4%d0%be%d0%b2%d0%b0%d0%bd%d0%b8%d0%b5][периферийное оборудование]] (в
   doc.org) Полное раскрытие списка с сенсорами и кнопками:
   [[file:doc.org::*%D0%9F%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BF%D0%B5%D1%80%D0%B8%D1%84%D0%B5%D1%80%D0%B8%D0%B8%20%D0%BA%20%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%BB%D0%B5%D1%80%D1%83][Подключение
   периферии к контроллеру]] (в doc.org)

***** Чтение настроек оборудования от уровня хранение и обновления

   Чтение настроек для каждого конкретного оборудования от уровня хранения и обновления
   настроек =SettingsLayer=.

   [TODO] Описание и ссылка

**** Требования к реализации =HardwarePresentationLayer=

***** Интерфейс обмена с уровнем =BusinessLogicLayer=

   1.1 Связь уровней в пилотной версии обеспечивается через протокол TCP/IPv4 на
   localhost.  Порт по выбору разработчика.

   [COMMENT:ranma] Кто сервер, а кто клиент - надо обсудить. 
   Обсуждено. Каждый уровень это и сервер и клиент, которые соединяются между собой 
   и внешними ресурсами через проксирующий nginx.

   1.2 Формат данных при обмене должен удовлетворять требованиям к JSON document.

   1.3 В продакшн версии обсуждается использование FFI - foreign function interface.

   1.4 Формат команды в JSON от =BusinessLogicLayer= к HWVirtualizeLayer: {
   deviceName:<device name>[, command:<command type>, data:<data structure>] }

   1.5 Формат команды в JSON от =HardwarePresentationLayer= к BusinessLogicLayer: {
   deviceName:<device name>[, event:<event type>, data:<data structure>] } event type
   может быть в том числе и запросом данных от BusinessLogicLayer.

***** Интерфейс настройки оборудования

   Интерфейс к настройкам оборудования должен быть предоставлен уровнем хранения и
   обновления настроек =SettingsLayer=.

***** Интерфейс к коммутационному оборудованию

   Интерфейс к коммуникационному оборудованию предоставляется операционной системой и
   используемым фреймворком.

   Каждому типу коммуникационного оборудования должен соответствовать шаблонный
   синглтон. Каждому конкретному оборудованию - синглтон-инстанс с заданным параметром:
   номер оборудования этого типа.

***** Интерфейс к подключённому оборудованию

   Интерфейс к подключенному оборудованию должен быть описан в документации к
   конкретному оборудованию. TODO: Список протоколов, подлежащих реализации.

   Каждому типу оборудования должен соответствовать шаблонный синглтон. Каждому
   конкретному оборудованию - синглтон-инстанс с заданным параметром: номер
   оборудования этого типа.

***** Стандарт доступа к ресурсам ядра

   При разработке =HWVirtualizeLayer= на языке С++ необходимо использовать единый
   стандарт доступа к ресурсам ядра с помощью определенного стандартного
   фреймворка. Использование других возможностей ОС и других фреймворков по умолчанию
   запрещено, опционально оговаривается отдельно.

   Выбор стандарта и фреймворка исходя из требований полной модульности и
   кроссплатформенности среди *nix-совместимых ОС.

   Выбор проводился между:

   =POSIX= + =STL only= - всем известны, долго писать, плодить лишние уровни
   архитектуры) - неэффективно

   =STL= + =boost= (boost на старте требует некоторого уровня входа, можно быстро и
   легко создавать многопоточный безопасный код, может полностью заменить POSIX, код
   получается полностью кроссплатформенный, код долго собирается) - эффективно

   =QT= (требует отдельных навыков разработки, не удовлетворяет требованиям полной
   модульности) - не подходит для этой задачи

   [COMMENT:ranma] Предлагаю использовать C++ + STL + boost.

   [TODO] Доводы против писать здесь.

*** TODO Работа с библиотеками

    [todo:unrimah:ranma] Определится с какими либами мы работаем - статическими или
    динамическими. Интерес постановщика задач в том, чтобы мы могли легко заменять
    библиотеки, касающиеся того или иного конкретного оборудования.

    [comment:ranma]
    На слое представления динамические библиотеки требуются для устройств и протоколов,
    классы коммуникационных устройств будут использоваться всегда и к тому же настолько
    малы, что не их не имеет смысла выносить в отдельные файловые сущности вообще.
    Таким образом у нас будет 2 типа интерфейса к библиотекам: для устройства и для
    кодека протокола. До первого релиза версии АПИ к либам будут меняться очень часто,
    что при динамическом связывании потребует частой замены дополнительных файлов на
    устройствах и отслеживания их совместимости по API. Кроме того для динамических либ
    требуется загрузчик линковщик, который можно всегда дописать позже без проблем.
    Таким образом в начале разработки предлагается использовать только статику.
    К тому моменту, когда число устройств (то есть либ) станет значительным и, что важнее,
    устоится API, то их все можно будет пересобрать в динамику и добавить 2 типа загрузчика
    под 2 указанных API.
    Кратко: до первого полного релиза и какое-то время после -  статика.
    после того, как число устройств станет значительным - динамика.

*** WAIT  Драйвера переферии :unrimah:
*** TODO Операционная система

    [TODO:unrimaha] - systemD supervisor etc

*** TODO Протоколы периферии
*** TODO Резервирование системы					    :unrimah:

    Унификация процесса =восстановления после грандфакапа= и =развертывания системы=

*** TODO Web-интерфейс для настройки контроллера                    :rigidus:

    Микроконтроллер должен иметь собственный Web-сервер для возможности доступа к его
    настройкам через локальную сеть по IP адресу и наличия функции перепрошивки и
    обновления программного обеспечения контроллера без физического доступа к нему.

    Через UI контроллера должна быть реализована настройка доступа пользователей к интерфейсу.
    См. распределение [[*%D0%A0%D0%BE%D0%BB%D0%B8%20%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D0%B5%D0%B9%20%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D1%8B][роли пользователей системы]] (=root= и =admin= применимо для контроллера).

    Через UI контроллера должны быть реализованы настройки бизнес-логики контроллера:
    - [[*%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B8%20%D0%B0%D0%B4%D0%BC%D0%B8%D0%BD%D0%B8%D1%81%D1%82%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%B0%20%D0%B8%D0%B7%20web-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D0%B0%20%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%BB%D0%B5%D1%80%D0%B0][Настройки администратора из web-интерфейса контроллера]]
    - [[*%D0%A2%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B8%20%D0%B4%D0%B8%D0%B0%D0%B3%D0%BD%D0%BE%D1%81%D1%82%D0%B8%D0%BA%D0%B0%20%D0%B8%D0%B7%20web-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D0%B0%20%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%BB%D0%B5%D1%80%D0%B0][Тестирование и диагностика из web-интерфейса контроллера]]
    - [[*%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B8%20%D1%82%D0%B0%D1%80%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D0%B8%20%D0%B8%D0%B7%20web-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D0%B0%20%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%BB%D0%B5%D1%80%D0%B0][Настройки тарификации из web-интерфейса контроллера]]
    - Настройка функционирования торгового оборудовния из web-интерфейса контроллерачы

    Через UI контроллера должны быть реализованы настройки =идентификации стойки= (контроллера):
    - установка номера стойки в системе
    - установка стевого имени, которым стойка представляется в LAN
    - установка значений секторов для стойки - из какого в какой проезжает машина (0 - вне парковки)

    Через UI контроллера для пользователя =root= должно быть реализовано:
    - возможность установки, обновления, подключения и отключения библиотек для работы с переферийным оборудованием
    - возможность установки, обновлеия, подключения и откючения бибилиотек для работы с дополнительными программными модулями
    - настройка удалённого доступа по SSH и удалённого обновления из репозиториев (только для =root=)
    - доступ к SSH через web-интерфейс при закрытом SSH порте

    Через UI контроллера администратор должен получать информацию о аппаратной и программной частях:
    - уникальный ID или s/n самой платы микрокомпьютера
    - версию ядра системы (не ОС, а нашего программного продукта)
    - список установленных библиотек, их версий и статуса
    - доступ к истории событий контроллера

    Через UI контроллера должны быть реализованы сетевые настройки:
    - возможность настройки IP адреса, маски, шлюза для дсотупа в LAN
    - настройка портов по которым контроллер общается с сервером
    - настройка порта на котором находится web-интерфейс
    - WAIT включение / отключение широковещательной рассылки (или другой системы,
      направленной на автономную работу стоек без сервера)

** DONE Первичный запуск контроллера
*** DONE Подключение к BBB по ssh

    Для начала работы с ВВВ нужен только кабель miniUSB - по нему плата и питается, и
    коммуницирует. Драйвера скачиваются с
    http://beagleboard.org/static/Drivers/Windows/BONE_D64.exe, после установки -
    подключаем плату к USB. В устройствах появляются Serial port (у меня СОМ3) и новое
    сетевое подключение (Linux USB Ethernet/RNDIS Gadget). Для доступа потребуется
    PuTTY, либо другая утилита консольного доступа.

    Для доступа через СОМ-порт: устанавливаем соединение через PuTTY, выбрав нужный СОМ,
    выставив скорость 115200, опционально - отключив flow control. Попадаем в консоль,
    вводим в качестве логина "root" (без кавычек), пароля не требуется. Вуаля, мы в
    консоли.

    Для доступа по ssh: конфигурируем сетевое подключение, вводим статический адрес
    192.168.7.1, маска 255.255.255.0. Теперь мы можем постучаться в ВВВ по ssh, по
    адресу 192.168.7.2 (login=root), либо открыть в браузере страничку
    http://192.168.7.2, где крутится справочная страничка на apache2.

    Для доступа через общий роутер: нужен патч-корд и роутер, умеющий раздавать адреса
    по dhcp. Подключаем, перезагружаем ВВВ кнопкой "reset" или командой консоли reboot,
    находим присвоенный ВВВ адрес - в логах роутера или в консоли по команде "ifconfig
    eth0", далее - возможен доступ по ssh или через браузер. На настоящий момент адрес
    10.0.10.114.

    На порту 3000 (http://10.0.10.114:3000) развернута IDE Cloud9 с массой интересных
    возможностей, есть с чем поиграться.

*** DONE Компиляция и запуск HelloWorld на BBB

    Простые сишные файлы компилируются по "gcc example.c -o example" и запускаются
    "./example"

*** DONE Установка и базовый запуск nginx

    По умолчанию на ВВВ крутится apache2. Готовых .deb пакетов nginx для архитектуры
    ARM нет, надо собирать из исходников. Исходники лежат здесь:
    http://hg.nginx.org/nginx/shortlog/stable-1.8 (последние на сегодня), потом можно
    поискать следующую стабильную версию.

    Скачиваем http://hg.nginx.org/nginx/archive/stable-1.8.tar.gz, загружаем на ВВВ
    через scp scp stable-1.8.tar.gz root@10.0.10.114:/root/build ^^^!!! это запускается
    на нашей машине в консоли, в папке где лежит архив!!!  (если папки /root/build нет,
    её можно создать "mkdir /root/build" из консоли ВВВ)

    Дальше распаковываем архив:
    tar -xzf stable-1.8.tar.gz

    Переходим в папку nginx:
    cd nginx-stable-1.8

    Файл конфигурации лежит не там, где нужно. Перетаскиваем, запускаем:
    cp auto/configure .
    ./configure

    Сконфигурировалось, собираем командой "make", устанавливаем "make install"
    Nginx не прописывает себя в системные пути, вручную его можно запустить
    /usr/local/nginx/sbin/nginx

    ...но пока крутится apache2, мы с конфигурацией по умолчанию этого не сделаем.
    vi /usr/local/nginx/conf/nginx.conf
    в строке 37 выставляем "listen 8081"

    Снова запускаем nginx, открываем приветствие nginx по адресу http://10.0.10.114:8081/
    Вуаля.

* TODO Серверная часть                                              :rigidus:
** TODO Общие положения

   Серверную часть необходимо полностью переписать в соответствии со
   следующими критериями:

   - Необходимо отойти от связки php+apache, сервер должен иметь
     автономное ядро (бэкэнд, сервер приложений) которое возможно будет
     развернуть на платформах ОС семейств Windows или Linux. Выбор
     оптимальных средств (языка программирования) с помощью которых
     будет реализована данная задача на данный момент является
     приоритетной задачей.

   - В качестве сервера БД предлагается использовать бесплатные системы
     MySQL с базами InnoDB или PostgreSQL (выбор необходимо
     аргументировать). Пройдено и мускуль нахер послан.

   - Все требуемые администратору системы и конечному пользователю
     интерфейсы и средства должны быть реализованы в кроссплатформенном
     браузерном варианте. Т.е. система должна быть реализована по
     принципу "одного окна" (или точнее "всё на одной вкладке
     браузера"). В дальнейшем возможно создание клиентских приложений на
     замену браузерной реализации, но данная задача не является
     приоритетной.

   - Сервер должен иметь модульную структуру как по функционалу, так и
     по доступным конечным пользователям интерфейсам управления и
     администрирования (фронтэнду). Модули должны подключаться к серверу
     в процессе изначальной установки, либо легко подключаться
     после. Необходимо предусмотреть возможность инсталляции модулей как
     с носителя, так и из сетевого репозитория.

   - Ядро сервера и модули должны иметь встроенные средства
     защиты. Предполагается использование аппаратного ключа HASP или
     RuToken (возможно аналогов) для ядра и отдельных программных ключей
     лицензирования для подключения отдельных модулей.

   - При создании сервера необходимо разработать APIи техническую
     документацию для возможности дальнейшей интеграции нашего ПО с
     системами СКУД, 1С и т.д.

   - Необходима возможность объединения серверов в кластеры,
     т.е. несколько локальных серверов на отдельных парковках должны
     иметь возможность обмениваться информацией с центральным сервером в
     центре управления. Центральный сервер же должен иметь приоритет над
     локальными, имея возможность управлять СКД во всём кластере,
     тарифами и т.д.

** TODO Основной функционал сервера:

   В базовом варианте сервер должен иметь собственно ядро, БД и два
   основных модуля (интерфейса) - администратора системы и парковщика.

   Администратор системы должен иметь следующие возможности:

   - Получать информацию обо всех стойках и терминалах, находящихся в
     локальной сети по факту настройки стоек на работу с данным сервером.

   - Изменение IP-адресов, ключей шифрования, номеров стоек, управления
     секторами, временем, информацией, выводимой на дисплей стоек и
     печатаемой на чеках, подключения и удалённого программного
     отключения периферийного оборудования на них (торговое
     оборудование, светофоры, табло), гибкой настройки логики работы
     сенсоров (фотоэлементов, магнитных петель).

   - Получение информации агрегируемую сервером со стоек - события
     въездов, выездов, оплаты, ошибки и т.п., которая должна писать в лог
     и быть доступна для выгрузке по дате в отчёт в формате *.xls.

   - Доступ к средствам тестирования работоспособности стоек (аналог
     текущего ParkingTest).

   - Управление пользователями системы, создание логинов и паролей,
     распределение прав доступа к интерфейсам из-под учётных записей и
     групп пользователей системы (в том числе и для самого себя).

   Оператор парковки должен иметь следующие возможности:

   - Открытие и закрытие шлагбаумов, подключённых к стойкам, находящимся
     в локальной сети.

   - Управление количеством свободных мест на парковке.

   - Мониторинг информации, приходящей со стоек (лога) в режиме
     реального времени.

** WAIT База данных
** TODO Web-интерфейс сервера

   Сервер выступает в системе аггрегатором данных и хранилищем общих настроек для всех
   стоек и терминалов оплаты систем.

   Через него можно конфигурировать все стойки, уже подключённые к нему и видимые им:
   вместо подключения к каждой стойке отдельно через UI или SSH можно выбрать
   устройство в =списке стоек= на сервере и получить дсотуп к её настройкам из общего
   интерфейса.

   Также в разделе =список стоек= можно увидеть время последней связи со стойкам и
   короткий отчёт об их статусах работы.

   Роли и права доступа к UI сервера описаны в разделе [[*%D0%A0%D0%BE%D0%BB%D0%B8%20%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D0%B5%D0%B9%20%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D1%8B][Роли пользователей системы]].

   В UI сервера частично дублируются настройки бизнес-логики, которые можно сделать на самих стойках
   (например, простые настройки тарифов), но при этом настройки выставленные на
   сервере автоматически рассылаются на все подключённые к нему стойки (если на них
   включено автообновление) в соответствии с установленными параметрами. Например, на
   сервере возможно создание тарифной сетки по секторам и тарифы рассылаются стойкам в
   зависимотсти от того, к каким секторам они относятся.

   Кроме каскадирования настроек, через UI сервера должны быть реализованы настройки
   дполнительных модулей, требующие наличие единого хранилища данных.
   См. [[*%D0%94%D0%BE%D0%BF%D0%BE%D0%BB%D0%BD%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5%20%D0%B0%D0%BF%D0%BF%D0%B0%D1%80%D0%B0%D1%82%D0%BD%D0%BE-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BD%D1%8B%D0%B5%20%D0%BC%D0%BE%D0%B4%D1%83%D0%BB%D0%B8][Дополнительные аппаратно-програмные модули]]

** WAIT Агреггирующий сервер
* TODO Дополнительные аппаратно-програмные модули

   Мы хотим продавать решение разным людям за разные деньги. Обосновать это им можно
   только предоставляя разные версии функционала.

   Дополнительные модули должны подключаться к системе по запросу клиента в тех или
   иных сочетаниях. При этом, каждый из этих установленных модулей подключается
   администратором системы конкретному пользователю (группе пользователей). Это
   позволяет сегментировать стоимость решения по цене.

*** TODO Модуль =платной парковки=

    Добавляет возможность работы с оплатой парковочного времени и управляет тарифами на
    парковке.

    В системы добавляется интерфейс администратор тарифов, с помощью которого можно
    изменять почасовую стоимость пребывания на парковке, бесплатное время пребывания на
    парковке, время бесплатного выезда с парковки после оплаты услуг и т.д.

*** TODO Модуль =СКУД=

    Добавляет возможность работы с бесконтактными картами доступа в безусловном режиме
    разрешения / запрета въезда.

    В систему добавляется интерфейс администратора СКУД, который позволяет заводить в
    систему карты доступа по их индивидуальному номеру, вводить информацию о владельцах
    карт (ФИО, гос. номер транспортного средства и т.п.), распределять карты по
    различным группам доступа.

    Группы доступа могут иметь различные права по времени возможного въезда/выезда с
    парковки, по посещению тех или иных секторов парковки, а также иметь численное
    ограничение количества въездов (т.е. карт выдано в группе 10, но данной группе на
    парковке принадлежит только 5 мест и одновременно на парковке / в секторе парковки
    может находиться только 5 машин).

    Карты доступа могут временно блокироваться, переноситься в архивные и окончательно
    удаляться администратором. Если установлены другие модули, работающие с б/к
    картами, администратор может изменять тип карт с одного на другой (абонемент,
    дебетовая).

    У оператора парковки при подключённом модуле СКУД в логе добавляются сообщения о
    въездах и выездах по картам. Также добавляется интерфейс аудитора СКУД, который
    позволяет пользователю с данными правами получить доступ к информации о картах
    доступа, но не даёт возможности её изменять.

*** WAIT Модуль для =работы с абонементами=

    Добавляет возможность работы с бесконтактными картами в режиме оплаты услуг
    парковки владельцем карты на заданный срок - т.е. оплата на фиксированную сумму
    производится один раз в установленный срок.

    В систему добавляется интерфейс администратора абонементных карт,позволяющий
    заводить в систему абонементные карты по их индивидуальному номеру, вводить
    информацию о владельцах карт (ФИО, гос. номер транспортного средства, номер
    договора на предоставление услуг и т.п.), распределять карты по различным группам
    доступа и тарифными группам.

    Группы доступа используются те же, что и в модуле СКУД.

    Абонементные карты могут временно блокироваться, переноситься в архивные и
    окончательно удаляться администратором.

    Если установлены другие модули, работающие с б/к картами, администратор может
    изменять тип карт с одного на другой (СКУД, дебетовая).

    В интерфейс администратора тарифов добавляется возможность работы с тарифными
    группами, сроками и стоимостью оплаты для абонементов.

    У оператора парковки, при подключённом модуле работы с абонементами, в логе
    добавляются сообщения о въездах и выездах по картам и сроке действия карт.

    Также добавляется интерфейс аудитора абонементных карт, который позволяет
    пользователю с данными правами получить доступ к информации об абонементных картах
    и сроках оплаты клиентом услуг, но не даёт возможности её изменять.

*** WAIT Модуль для =работы по дебетовым картам=

    Добавляет возможность работы с бесконтактными картами в режиме оплаты услуг
    парковки владельцем карты по специальному тарифу - т.е. он кладёт деньги на карту
    через кассу, сумма фиксируется в платёжной системе парковки и далее деньги
    списываются с него исходя из времени пребывания на парковке при выездах, но по
    особым тарифам.

    В систему добавляется интерфейс администратора дебетовых карт,позволяющий заводить
    в систему дебетовые карты по их индивидуальному номеру, вводить информацию о
    владельцах карт (ФИО, гос. номер транспортного средства, номер договора на
    предоставление услуг и т.п.), распределять карты по различным группам доступа и
    тарифными группам.

    Группы доступа используются те же, что и в модуле СКУД.

    Дебетовые карты могут временно блокироваться, переноситься в архивные и
    окончательно удаляться администратором.

    Если установлены другие модули, работающие с б/к картами, администратор может
    изменять тип карт с одного на другой (СКУД, абонементная).

    В интерфейс администратора тарифов добавляется возможность работы с тарифными
    группами и стоимостью времени пребывания на парковке для дебетовых карт.

    У оператора парковки, при подключённом модуле работы с дебетовыми картами, в логе
    добавляются сообщения о въездах и выездах по картам и списанных со счёта средствах.

    Также добавляется интерфейс аудитора дебетовых карт, который позволяет пользователю
    с данными правами получить доступ к информации о дебетовых картах, состоянии счёта
    клиента и тарифном плане, но не даёт возможности ничего изменять.

*** WAIT Модуль =акцептирования=

    Добавляет в систему возможность обнуления требующего оплаты билета со штриховым
    кодом через интерфейсную оболочку.

    В систему добавляется интерфейс акцептирования билета в котором пользователь может
    ввести в специальное поле номер билета (или считать номер сканером штрих-кода) и
    произвести либо безусловное акцептирование - сделать билет бесплатным для выезда
    навсегда изменив информацию о нём на сервере и выездных стойках, либо
    акцептирование на выезде- у клиента будет возможность покинуть парковку в течении
    бесплатного времени после акцептирования, либо акцептирование по тарифу - данному
    билету присваивается специальный тариф (используется список тарифов дебетового
    режима) и стоимость пребывания на парковке пересчитывается исходя из него.

    При акцептировании пользователь вводит комментарий, в котором пишется причина
    акцептирования.

    Вся информация о проведённых акцептированиях билетов (пользователь, номер билета,
    время акцептирования, сумма акцептирования) пишется в лог и доступна для
    ознакомления в интерфейсе аудитора акцептирования.

*** WAIT Модуль =арендаторов=

    Добавляет в систему возможность обнуления требующего оплаты билета со штриховым
    кодом на кассах, стойках информации или через интерфейсную оболочку с помощью карты
    арендатора с последующим списанием обнулённой суммы на счёт владельца карты.

    В систему добавляется интерфейс администрирования арендаторов, в котором можно
    создавать пользователей - "арендаторов" и привязывать их бесконтактным картам и
    основным пользователям системы.

    Каждому арендатору выдаётся своя бесконтактная карта, для которой в системе
    администратором установлен режим акцептирования (режимы перечислены в описании
    модуля акцептирования, для дебетового режима устанавливается тариф).

    С помощью этой карты арендатор может акцептировать билет клиента, приложив сначала
    билет, а затем карту к стойке информации, кассе или введя номер билета на ПК, а
    затем приложив карту к считывателю на ПК. После этого клиент покидает парковку в
    соответствии с правилами акцептирования, а акцептированная сумма переводится на
    "овердрафтовый счёт" данного арендатора в системе.

    Все данные по этому счёту отображаются в интерфейсе счета арендаторов. Через этот
    интерфейс можно либо списать сумму, которую должен арендатор, либо распечатать
    фискальный чек через ККМ, подключённый к ПК, либо выгрузить форму счёта на оплату в
    банке.

*** TODO Модуль =кассира=

    Добавляет в систему возможность оплаты услуг парковки через ручную кассу на базе ПК
    к которому подключён ККМ и, опционально, денежный ящик и сканер штриховых кодов.

    В систему добавляются интерфейсы кассир и кассир - парковщик. В интерфейсе кассира
    пользователь может провести процедуру оплаты билета - вбить его номер (или считать
    номер сканером штрих-кода), выбрать тариф оплаты, принять сумму к оплает и
    распечатать выездной фискальный чек с суммой, рассчитанной системой исходя из
    времени и тарифа.

    При этом приём денег и выдача сдачи осуществляется непосредственно человеком.

    Кассир-парковщик имеет интерфейс оплаты совмещённый с интерфейсом обычного
    оператора парковки в котором есть возможность открытия и закрытия шлагбаума, доступ
    к логу и т.п.

*** WAIT Модуль =бухгалтера=

    Добавляет в систему возможность получения финансовых отчётов по парковке и кассовым
    аппаратам (нарастающий итог, оборот по кассам и т.п.), а также делает возможным
    автоматическое снятие Z-отчётов, печать копий Z-отчётов, изъятие установленной
    суммы из автоматической кассы и т.д.

*** WAIT Модуль =фотофиксации=

    Добавляет в систему фотографирования камерами по событию.

    В интерфейсе администратора системы добавляется функция привязки камеры к
    конкретной стойке и список событий, производимых со стойкой, по которым камера
    должна производить фотографирование.

    Во все логи, в том числе и у оператора парковки, к сообщениям о данных событиях
    прикрепляются фотографии.

    Также добавляются интерфейсы машины на парковке и аудиторфотофиксации в которых
    можно посмотреть фотографии всех машин, которые приехали на парковку и находятся на
    ней и, соответственно, приехали и уехали с парковки в установленный промежуток
    времени.

*** WAIT Модуль =распознания номеров=
*** TODO Модуль =дуплексной IP связи=

    Интеграция с SIP сервером VoIP связи Asterisk

* WAIT Интеграция со сторонними решениями
** WAIT Выгрузка данных в 1С
** WAIT Интеграция с 1С
** WAIT Интеграция со сторонним биллингом

   Интеграция с системами биллинга платёжных терминалов.

** WAIT Интеграция с NOW!
** WAIT Интеграция с SOLVO
** WAIT API для создания библиотек

   Ориентирование системы на написание библиотек переферии сторонними разработчиками

* WAIT Тестирование
** TODO Описать полный цикл работы системы с обработкой ошибок         :pyub:
**** TODO На алгоритмы проезда
**** TODO На алгоритмы оплаты
**** TODO Совмещенные алгоритмы
* TODO Глоссарий
** Сигнал

   =Сигнал= - это то, что поступает на контроллер с перифирийного датчика или что мы
   шлем, чтобы включить лампочку, т.е. это замыкание реле и принимаемая на GPIO простая
   логика (0 или 1) .

** Сообщение

   =Сообщение= - это то, что контроллеры и некоторые периферийные устройства шлют друг
   другу, серверу и пользователю. Сообщения могут быть =синхронными= и =асинхронными=

** Событие

   =Событие= - это то, что внезапно произошло и на что надо отреагировать (обработать
   событие). Сигнал или сообщение может спровоцировать возникновение события. События
   обрабатываются синхронно.

** Состояние

   =Состояние= определяет реакции на события - к примеру, когда пользователь нажимает
   на кнопку стойки - реакция разная, в зависимости от того в каком состоянии находится
   стойка. Переходы из одного состояния в другое производятся при обработке событий

** Процедура

   =Процедура= - это последовательность взаимодействий элементов системы включая
   пользователей и операторов для достижения результата.

** Датчик

   =Датчик= это внешнее переферийное устройство или его часть, предназначенное для
   сбора данных и выработки на их основе =сигналов=, реже - =сообщений=, передаваемых
   на контроллер.

*** Датчик присутствия автомобиля

    #+CAPTION: Датчик присутствия автомобиля
    | выход | сухой контакт  |

    Устройство, отслеживающее наличие объекта, соответствующего по установленным
    характеристикам автомобиля (петля индуктивности, датчик магнитного поля,
    фотоэлемент безопасности)

*** Датчик (фотоэлемент) безопасности

    Устройство, отслеивающее наличие любого объекта в зоне или на линии контроля
    (фотоэлемент безопасности)

*** Датчик контроля состояния стрелы шлакбаума

    Часть конструкции автоматичекого шлагбаума, отслеживающая состояние
    открытия/закрытия стрелы шлагбаума (концевики или релейная развязка)

** TODO Стойка                                                         :pyub:

   =Стойка= - это корпус устройства в который собирается вся периферия и контроллер.

   Стойки бывают:
   - =въезда= - стойки устанавлеваемые на въезде, характеризуются возможностью выдавать
     билеты(или mifare карты), управлять шлагбаумом.
   - =выезда= - стойки устанавлеваемые на выезде, характеризуются возможностью
     сканировать билеты(или принимать mifare карты), управлять шлагбаумом.
   - =проезда= - стойки устанавлеваемые на территори характеризуются возможностью сканировать
     билеты (или mifare/em-marine карты), управлять шлагбаумом, регулировать работу зон
     парковки.
   - =оплаты= - стойка с функционалом =кассы=, устанавливаемая на территори парковки, характеризуемая
     возможностью сканировать билеты (или mifare/em-marine карты), принимать оплату и
     печатать фискальный чек.
   - =оплаты совмещенная с въездом= - это стойка с функционалом =кассы=, устанавливаемая
     на въезд на парковку, характеризуемая возможностью выдачи билетов (mifare карт),
     приёма оплаты, печатати фискального чека и управления шлагбаумом.
   - =оплата совмещенная с выездом= - это стойка с функционалом =кассы=, устанавливаемая
     на выезде с парковки, характеризуемая возможность сканирования билетов (приёма mifare карт),
     приёма оплаты, печатати фискального чека и управления шлагбаумом.
   - =СКУД= - стойки устанавлеваемые на территори/въезде/выезде парковки,
     характеризуются возможностью сканировать mifare/em-marine карты), управлять
     шлагбаумом.
   - =информации= - стойки устанавливаемые на территори парковки, характеризуются
     возможностью сканировать билеты (или mifare карты), выводить на дисплей данные по
     ним и различные проводить операции со временем или внутренним счетом билета
     (карты)

   У стойки есть:

   [TODO:pyub] - Здесь надо перечислить все данные, которые мы храним по стойке.

   [TODO:rigidus] - По стойке или всё-таки по =контроллеру=? Уверен, что этому место в
   глоссарии?

   [TODO:pyub] - Данные связанные с местом проезда. Может быть этому
   не место в глоссарии, но эти данные мне нужны сейчас чтобы построить модель стойки,
   если что - перенести не проблема. Добавь их плиз в таблицу ниже:

   #+CAPTION: Данные стойки
   #+NAME: checkpoint_flds
     | field name | field type | note                   |
     |------------+------------+------------------------|
     | id         | serial     | идентификатор          |
     | name       | varchar    | никнейм стойки (номер) |

     s/n контроллера который мы загружаем
     номер сектора

** Периферийные устройства

   =Периферийные устройства= - это устройства подключаемые к контроллеру парковки,
   получающие от него и отсылающие ему =сигналы= или =сообщения=.

   Периферийные устройства бывают:

   =внутренние= - устройства подключаемые к контроллеру парковки, характеризуемые
   расположением внутри стойки

   =внешние= - устройства подключаемые к контроллеру парковки, характеризуемые
   расположением вне стойки стойки

   =торговые= - любое устройство, подключаемое к контроллеру парковки или ПК,
   работающее с деньгами (монеты/купюры/банковские карты)

   =опросные= - устройство, статус которого постоянно проверяется системой и при выходе
   из строя которого так или иначе изменяется функционал и принцип работы системы

   =критичное для работы= - частный случай опросного устройства, при выходе из строя
   которого стойка автоматически уходит в состояние "Заблокирована"

** Касса

   =Касса= (или =платежный терминал=) - это комплекс устройств (возможно - стойка)
   обеспечивающих оплату пребывания посетителя на парковки и дополнительных услуг.

   - =автоматическая касса= - это =стойка= устанавливаемая на территории парковки,
     обепечиает полностью автоматизированный цикл оплаты пользователем услуг парковки.

   - =автоматическая каасса совмещенная с въездом= - это то же, что  =стойка оплаты совмещённая с въездом=.

   - =автоматическая касса совмещенная с выездом=  - это то же, что  =стойка оплаты совмещённая с выездом=.

   - =ручная касса= - это имеющее собственный корпус устроство под управлением
     =контроллера= с встроенным в него сканером штрих-кодов (считыватель карт
     em-marine/mifare), денежным ящиком и фискальным регистратором. Все операции
     получения денег и выдачи сдачи производит оператор (кассир) без автоматизирующего
     процесс торгового оборудования.

   - =касса на базе ПК= - это настольный персональный компьютер с подключенными к нему
     настольными сканером штрих-кодов (считыватель карт em-marine/mifare), денежный
     ящик и фискальный регистратор. Все операции получения денег и выдачи сдачи
     производит оператор (кассир) без автоматизирующего процесс торгового оборудования.

** Проездной документ

   Это носитель информации, выдаваемый посетителю парковки, на котором находится (в
   т.ч. шифруется) информация о времени и терминале въезда на парковку, а также данные,
   необходимые для автономного функционированния парковки и реализации различных
   механизмов монетизации.

   Проездные билеты можно разделить разовости прмменения, по материалам из которых они
   сделаны, по

   Типы:
   - =одноразовый= - единоразово создаваемый и выдаваемый клиенту носитель информации,
     который несёт на себе информацию о времени въезда и терминале въезда
   - =многоразовый= - многоразово используемый проездной документ, с помощью которого
     посетитель паркови может посещать её не пользуясь одноразовыми въездными билетами=

   Материалы:
   - =бумажный= - напечатанный на термобумаге или картоне, информация зашифрована в
     штриховом коде
   - =пластиковый= - карта стандарта EM-Marine или Mifare, информация зашифрована на
     чипе карты

*** Категории:

    =въездной= - разновидность билета получаемого при въезде на парковку

    =выездной= - разновидность билета получаемого (или перведенимого в данный статус из
    въездного) при оплате парковки, как правило совмещён с фискальным чеком

*** Статусы:

    =с бесплатным временем= - билет на котором еще не закончеллось бесплатное время
    стоянки

    =неоплаченный= - билет на котором закончелось бесплатное время и началось платное
    время стоянки

    =оплаченный= - билет по которому была произведена оплата

    =использованный= - билет который уже использовали для выезда с парковки

    =фискальный чек= - документ выдаваеммый кассой при проведении операции оплаты, может
    быть сомещен с оплаченным билетом при использовании бумажных носителей

** Контроллер

   Это устройство, контролирующее работу ряда переферийных элементов автоматизированной
   парковки, регламентирующее работу стоек системы парковки и всех подключенных
   переферийных устройств. Контроллер устанавливется в стойках.

** Системы навигациии

   Контроллер, регламентирующий работу устройств, входящих в систему навигации и учёта
   сводных мест с помощью УДПА

   [TODO:pyub] - WTF УДПА?

** TODO Сервер                                                         :pyub:

   Сервера бывают:
   - =парковочной системы=
   - =агрегирующий=
   - =сторонний=
   - =навигационной системы=

** Время

   Время - это промежуток времени установленный в ситеме (следовательно и внесенный на
   носитель информации - билет)

   Время бывает:
   - =бесплатное= - промежуток в течении которого посетитель парковки может
     беспрепятственно выехать по текущему носителю информации
   - =платное= - промежуток в течении которого начисляется оплата согласно тарифам
     парковки
   - =оплаченное= - промежуток платного времени который оплатил посетитель
   - =на выезд= - промежуток бесплатного времени начисленный на носитель информации
     после оплаты платного времени, начинаестся сразу после превода платного в
     оплаченное время.
   - =акцептированное= - промежуток дополнительного бесплатного времени начисленный на
     носитель информации, учитывается при расчете платного времени.
   - =сверх оплаченного= - промежуток платного времени начинающийся после окончания
     времни на выезд.

** Группы

   Группы - это группа стоек и перефериного оборудования устанавлваемого в точке
   проезда автомобиля или прохода посетителя.

   Группы бывают:
   - =въездная= - характеризуется установкой на въездах на территорию парковки
   - =выездная= - характеризуется установкой на выездах с территории парковки
   - =проездная= - характеризуется установкой на переездах  на территорию парковки
   - =реверсивная= - характеризуется установкой на реверсивных проездах (въезд и выезд по
     одной полосе) может быть одновременно и проездной

** Парковка

   =Территория парковки (парковка)= - комплекс инфраструктурных и дорожных объектов
   являющаяся отдельной территорией и оснащаемым АСПП.

   Территория парковки делится на сегменты согласно ряду признаков:
   - =сектор= - физический сегмент парковки, применим в системе подсчета свободных мест
     и/или ограничении типа проезжаемых автомабилий в данный сегмент.
   - =тарифные зоны= - логический сегмент парковки, применим при описании различных
     тарифов в зависимости от фактического места и времени стоянки и/или проезда автомобиля.

** TODO Посетитель                                                     :pyub:

   Посетитель - это водитель автомобиля посетившего парковку.

   - =разовый= - водитель, однократно вопользовавшийся услугой парковки и использующий
     одноразовые идентификатор. [TODO:pyub] - Ссылка на определение одноразового
     идентификатора
   - =постоянный= - водитель многократно и неограниченно пользующийся услугой парковки
     и использущий многоразовый идентификатор запрограммированный на определённый
     тип предотсвляемых услуг
   - =с картой доступа=
   - =с абонементом= -водитель многократно и неогранниченно пользующийся услугой парковк
     и использущий многоразовый носитель информации, и ежемесячно оплачивающий эти услуги
     через АСПП внося на внутренний счет носителя.
   - =с картой предоплаты= -водитель многократно пользующийся услугой парковк и
     использущий многоразовый носитель информации, оплачивающий фактической время
     пребывания со внутреннего счета носителя информации, и пополняющий его через АСПП

** TODO Деление парковкочных мест                                      :pyub:

   - =линия=
   - =объём=

** TODO Тариф                                                          :pyub:

   - =типы проездов через шл=
   - =переферия стоек внешняя=
   - =внутренний счет=
   - =мифаре=
   - =емарине=

** TODO Роли                                                           :pyub:
** TODO Внешний носитель                                               :pyub:
** TODO УДПА                                                           :pyub:
** TODO Процесс                                                        :pyub:
** TODO Рампа                                                          :pyub:
   Когда шлагбаум располагается после стойки и после-после стойки
** TODO Шлюз                                                           :pyub:
   Когда шлагбаум располагается до стойки и после стойки
** TODO Реверсивный проезд                                             :pyub:
* Данные по первому поколению системы
** DONE Старая версия сервера
   Доступ к текущей реализации сервера и БД для ознакомления:
   http://31.28.10.26:8889
   admin | 8812
   http://31.28.10.26:8889/phpmyadmin/
   root | gThy77gG

   [TODO:pyub] Изъять из общего доступа github?

* Сущности

  Соберем все сущности и автоматы в один файл =src/entityes.lisp=

  #+NAME: entity_and_automates
  #+BEGIN_SRC lisp :tangle src/entityes.lisp :noweb tangle :exports none :padline no :comments link
    ;;;; <<copyright>>

    <<gen_automat("checkpoint", "стойки", checkpoint_flds, checkpoint_state)>>

    <<checkpoint_trans_functions>>
  #+END_SRC

** Функции для кодогенерации сущностей

   Эти функции будут кодогенерировать сущности и автоматы из таблиц с наименованием и
   типами полей внутри этого файла.

   Чтобы емакс не запрашивал подтверждение на каждое исполнение кода, установим эту
   настройку:

   #+NAME: gen_org_confirm
   #+BEGIN_SRC emacs-lisp
     (setq org-confirm-babel-evaluate nil)
   #+END_SRC

   Начнем с генерации кода из таблицы полей:

   #+NAME: gen_fields
   #+BEGIN_SRC emacs-lisp
     (defun gen-fields (rows)
       (let ((result))
         (push "\n" result)
         (push (format "  (%s\n" (butlast (car rows))) result)
         (mapcar #'(lambda (x)
                     (push (format "   %s\n" (butlast x)) result))
                 (butlast (cdr rows)))
         (push (format "   %s)" (butlast (car (last rows)))) result)
         (mapconcat 'identity (reverse result) "")))
   #+END_SRC

   Теперь напишем код, который генерирует код для состояний конечного автомата:

   #+NAME: gen_states
   #+BEGIN_SRC emacs-lisp
     (defun gen-states (rows)
       (let ((result)
             (hash (make-hash-table :test #'equal))
             (states))
         (dolist (elt rows nil)
           (puthash (cadr elt) nil hash)
           (puthash (cadr (cdr elt))  nil hash))
         (maphash (lambda (k v)
                    (push k states))
                  hash)
         (push "\n" result)
         (push "  (" result)
         (dolist (elt (butlast states))
           (push (format ":%s " elt) result))
         (push (format ":%s)" (car (last states))) result)
         (mapconcat 'identity (reverse result) "")))
   #+END_SRC

   И добавим к этом генератор действий - т.е. переходов между состояниями:

   #+NAME: gen_actions
   #+BEGIN_SRC emacs-lisp
     (defun gen-actions (rows)
       (let ((result))
         (push "\n" result)
         (let ((x (car rows)))
           (push (format "  ((:%s :%s :%s)" (cadr x) (cadr (cdr x)) (car x)) result))
         (if (equal 1 (length rows))
             (push ")" result)
           (progn
             (push "\n" result)
             (mapcar #'(lambda (x)
                         (push (format "   (:%s :%s :%s)\n" (cadr x) (cadr (cdr x)) (car x)) result))
                     (cdr (butlast rows)))
             (let ((x (car (last rows))))
               (push (format "   (:%s :%s :%s))" (cadr x) (cadr (cdr x)) (car x)) result))))
         (mapconcat 'identity (reverse result) "")))
   #+END_SRC

   Соберем все это в один файл, чтобы загружать перед кодогенерацией проекта:

   #+NAME: generators
   #+BEGIN_SRC emacs-lisp :tangle generators.el :noweb tangle :exports code :padline no :comments link
     ;; <<copyright>>

     <<gen_org_confirm>>

     <<gen_fields>>

     <<gen_states>>

     <<gen_actions>>
   #+END_SRC

   И загрузим его:

   #+NAME: generators
   #+BEGIN_SRC emacs-lisp
     (load-file "generators.el")
   #+END_SRC

   Теперь у нас есть все необходимое, чтобы написать вызываемые при
   tangle генераторы сущностей и автоматов:

   #+NAME: gen_entity
   #+BEGIN_SRC emacs-lisp :var name="" docstring="" flds='() :exports none
     (let ((result))
       (push (format "(define-entity %s \"Сущность %s\"" name docstring) result)
       (push (gen-fields flds) result)
       (push ")\n" result)
       (push "\n" result)
       (push (format "(make-%s-table)\n" name) result)
       (mapconcat 'identity (reverse result) ""))
   #+END_SRC

   #+NAME: gen_automat
   #+BEGIN_SRC emacs-lisp :var name="" docstring="" flds='() states='() :exports none
     (let ((result))
       (push (format "(define-automat %s \"Автомат %s\"" name docstring) result)
       (push (gen-fields flds) result)
       (push (gen-states states) result)
       (push (gen-actions states) result)
       (push ")\n" result)
       (mapconcat 'identity (reverse result) ""))
   #+END_SRC

* Тесты

  #+NAME: asp_test
  #+BEGIN_SRC lisp :noweb tangle

    ;; Тестируем asp
    (defun asp-test ()
      <<asp_test_contents>>
      (dbg "passed: asp-test~%"))
    (asp-test)
  #+END_SRC

  #+NAME: asp_test_contents
  #+BEGIN_SRC lisp :noweb tangle
    <<test_make_checkpoint>>


  #+END_SRC

* Сборка
** Каркас проекта

   Для генерации "с чистого листа" необходимы функции генерации сущностей, они лежат в
   файле =generators.el=

   Чтобы их подключить - можно сделать M-x load-file generators.el в emacs-е.

   Эти функции помещаются в =generators.el= при =tangle= и редактировать их можно в
   соответствующем разделе этого файла. Для успешной генерации сущностей, они должны быть
   загружены в emacs.

   Файл =prepare= должен идти до файла =util= и остальных, так как в нем компилируются
   шаблоны, от которых зависит =util=

   Файл =globals= должен идти до файла =entity= так как в нем происходит подключение к базе
   данных, которое используют тесты сущностей и автоматов.

   #+NAME: defsystem
   #+BEGIN_SRC lisp :tangle asp.asd :noweb tangle :exports code :padline no :comments link
          ;;;; <<copyright>>
          ;;;; asp.asd

     (asdf:defsystem #:asp
       :serial t
       :pathname "src"
       :depends-on (#:closer-mop
                    #:postmodern
                    #:cl-mysql
                    #:anaphora
                    #:cl-ppcre
                    #:restas
                    #:restas-directory-publisher
                    #:closure-template
                    #:cl-json
                    #:cl-base64
                    #:drakma
                    #:split-sequence
                    #:cl-html5-parser
                    #:cl-who
                    #:parenscript
                    #:cl-fad
                    #:optima
                    #:fare-quasiquote-extras
                    #:fare-quasiquote-optima
                    )
       :description "asp"
       :author "rigidus"
       :version "0.0.3"
       :license "GNU AGPLv3"
       :components ((:file "package")    ;; файл пакетов
                    (:static-file "templates.htm")
                    (:file "prepare")    ;; подготовка к старту
                    (:file "util")       ;; файл с утилитами
                    (:file "globals")    ;; файл с глобальными определеями
                    (:file "bricks")     ;; компоненты для создания интерфейсов
                    ;; Модуль сущностей, автоматов и их тестов
                    <<mod_entity>>
                    (:file "entityes")   ;; Сущности и автоматы
                    (:file "start")      ;; стартовый файл
                    ;; Модуль авторизации (зависит от определения сущностей в стартовом файле)
                    <<mod_auth>>
                    ;; Модуль очередей
                    ;; <<mod_que>>
                    ;; Модуль сообщений
                    <<mod_msg>>
                    ;; Модуль trend
                    <<mod_trend>>
                    ;; Модуль мотобратан
                    ;; <<mod_bratan>>
                    ;; Модуль HeadHunter
                    <<mod_hh>>
                    (:file "events")     ;; события системы
                    (:file "iface")      ;; файл веб-интерфейса
                    ))
   #+END_SRC

** Пакеты

   Соберем весь код в пакет:

   #+NAME: package
   #+BEGIN_SRC lisp :tangle src/package.lisp :noweb tangle :exports code :padline no :comments link
     ;;;; <<copyright>>
     ;;;; package.lisp

     (restas:define-module #:asp
       (:use  #:cl #:closer-mop #:postmodern #:anaphora #:hunchentoot #:cl-who #:parenscript #:cl-fad #:optima)
       (:shadowing-import-from #:closer-mop
                               #:defclass
                               #:defmethod
                               #:standard-class
                               #:ensure-generic-function
                               #:defgeneric
                               #:standard-generic-function
                               #:class-name))
   #+END_SRC
** Подготовка к старту

   Подготовка включает в себя загрузку всех необходимых библиотек, компиляцию шаблонов, и,
   возможно, инициализацию окружения.

   #+NAME: prepare
   #+BEGIN_SRC lisp :tangle src/prepare.lisp :noweb tangle :exports code :exports none :padline no :comments link
     ;;;; <<copyright>>
     ;;;; prepare.lisp

     (in-package #:asp)

     (defparameter *repo-folder* "repo")
     (defparameter *prj-folder* "asp")

     ;; Базовый путь, от которого будем все считать
     (defparameter *base-path*
       (format nil "~A~A"
               (namestring (user-homedir-pathname))
               (format nil "~A/~A/src/"
                       ,*repo-folder*
                       ,*prj-folder*)))

     ;; Путь к данным
     (defparameter *data-path*
       (format nil "~A~A"
               (namestring (user-homedir-pathname))
               (format nil "~A/~A/data/"
                       ,*repo-folder*
                       ,*prj-folder*)))

     ;; Путь к стилям
     (defparameter *css-path*
       (format nil "~A~A"
               (namestring (user-homedir-pathname))
               (format nil "~A/~A/css/"
                       ,*repo-folder*
                       ,*prj-folder*)))

     ;; Путь к картинкам
     (defparameter *img-path*
       (format nil "~A~A"
               (namestring (user-homedir-pathname))
               (format nil "~A/~A/img/"
                       ,*repo-folder*
                       ,*prj-folder*)))
     (defparameter *pic-path*
       (format nil "~A~A"
               (namestring (user-homedir-pathname))
               (format nil "~A/~A/pic/"
                       ,*repo-folder*
                       ,*prj-folder*)))
     (defparameter *ava-path*
       (format nil "~A~A"
               (namestring (user-homedir-pathname))
               (format nil "~A/~A/ava/"
                       ,*repo-folder*
                       ,*prj-folder*)))

     ;; Путь к шрифтам
     (defparameter *font-path*
       (format nil "~A~A"
               (namestring (user-homedir-pathname))
               (format nil "~A/~A/fonts/"
                       ,*repo-folder*
                       ,*prj-folder*)))

     ;; Путь к скриптам
     (defparameter *js-path*
       (format nil "~A~A"
               (namestring (user-homedir-pathname))
               (format nil "~A/~A/js/"
                       ,*repo-folder*
                       ,*prj-folder*)))


     ;; Компилируем шаблоны
     (closure-template:compile-template
      :common-lisp-backend (pathname (concatenate 'string *base-path* "templates.htm")))

     ;; submodules

     (restas:mount-module -css- (#:restas.directory-publisher)
       (:url "/css/")
       (restas.directory-publisher:*directory* *css-path*))

     (restas:mount-module -img- (#:restas.directory-publisher)
       (:url "/img/")
       (restas.directory-publisher:*directory* *img-path*))

     (restas:mount-module -pic- (#:restas.directory-publisher)
       (:url "/pic/")
       (restas.directory-publisher:*directory* *pic-path*))

     (restas:mount-module -ava- (#:restas.directory-publisher)
       (:url "/ava/")
       (restas.directory-publisher:*directory* *ava-path*))

     (restas:mount-module -font- (#:restas.directory-publisher)
       (:url "/font/")
       (restas.directory-publisher:*directory* *font-path*))

     (restas:mount-module -js- (#:restas.directory-publisher)
       (:url "/js/")
       (restas.directory-publisher:*directory* *js-path*))

     ;; (restas:mount-module -resources- (#:restas.directory-publisher)
     ;;   (:url "/resources/")
     ;;   (restas.directory-publisher:*directory* "/resources/")
     ;;   (restas.directory-publisher:*autoindex* t))
   #+END_SRC

** Точка входа

   Отсюда все начинается

   #+NAME: enter_point
   #+BEGIN_SRC lisp :tangle src/start.lisp :noweb tangle :exports code :padline no :comments link
     ;;;; <<copyright>>
     ;;;; start.lisp

     (in-package #:asp)

     (defun main ()
       ;; start
       (restas:start '#:asp :port 3999)
       (restas:debug-mode-on)
       ;; (restas:debugg-mode-off)
       (setf hunchentoot:*catch-errors-p* t)
       (make-event :name "restart"
                   :tag "restart"
                   :msg (format nil "Сервер перезапущен")
                   :author-id 0
                   :ts-create (get-universal-time)))

     (main)

     ;; Тесты
     <<asp_test>>
   #+END_SRC
** Copyright

   #+NAME: copyright
   #+BEGIN_SRC lisp
     Copyright © 2014-2015 Glukhov Mikhail. All rights reserved.
     Licensed under the GNU AGPLv3
   #+END_SRC
